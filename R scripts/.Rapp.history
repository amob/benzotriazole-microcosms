layout(matrix(1:6,nrow=2,byrow=T))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA)#xlab="",ylab="",#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s)#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]])#
	mtext(modnames[i],side=3,line=0.5)#
#	ifelse(i==5){}#
}
dfs[[1]]$Day
means <- sapply(dfs function(m) tapply(m,m$Day,mean))
means <- sapply(dfs, function(m) tapply(m,m$Day,mean))
means <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,mean))
means
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
means <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,mean))#
ses <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,std.error))#
#
for(i in 1:7){#
plot(bzt$Concentration~bzt$Day,pch=NA)#
	points(means[,i]~c(0,3,7,11,17,21), type="l")#
	arrows(means[,i],y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
means
ses
head(bzt)
for(i in 1:7){#
plot(bzt$Concentration~bzt$Day,pch=NA)#
	points(means[,i]~c(0,3,7,11,17,21), type="l")#
	arrows(x0=means[,i],y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
for(i in 1:7){#
plot(bzt$Concentration~bzt$Day,pch=NA)#
	points(means[,i]~c(0,3,7,11,17,21), type="b")#
	arrows(x0=means[,i],y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
layout(matrix(1:8,ncol=4,byrow=T))#
for(i in 1:7){#
plot(bzt$Concentration~bzt$Day,pch=NA)#
	points(means[,i]~c(0,3,7,11,17,21), type="b")#
	arrows(x0=means[,i],y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
layout(matrix(1:8,ncol=4,byrow=T))#
for(i in 1:7){#
plot(bzt$Concentration~bzt$Day,pch=NA)#
	points(means[,i]~c(0,3,7,11,17,21), type="b")#
	arrows(x0=c(0,3,7,11,17,21),y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	points(means[,i]~c(0,3,7,11,17,21), type="b",col=c("black","red","yellow","blue","orange","green","gray")[i])#
	arrows(x0=c(0,3,7,11,17,21),y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	points(means[,i]~c(0,3,7,11,17,21), type="b",col=c("black","red","yellow","blue","orange","green","gray")[i])#
	arrows(x0=c(0,3,7,11,17,21),y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0)#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","red","yellow","blue","orange","green","gray")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","red","yellow","blue","orange","green","gray")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
	points(means[,i]~xjitter, type="b",col=c("black","red","yellow","blue","orange","green","gray")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","red","yellow","blue","orange","green","gray")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
	points(means[,i]~xjitter, type="b",col=c("black","red","goldenrod1","blue","orange","green","gray")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","red","yellow","blue","orange","green","gray")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
	points(means[,i]~xjitter, type="b",col=c("black","red","goldenrod1","blue","orange","green","gray")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","red","goldenrod1","blue","orange","green","gray")[i])#
	}
layout(matrix(1:8,ncol=4,byrow=T))#
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","darkcyan","","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","darkcyan","","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","darkcyan","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","darkcyan","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
plot(bzt$Concentration~bzt$Day,pch=NA)#
for(i in 1:7){#
	xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="")#
for(i in 1:7){#
	mext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	legend(10,6,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n")#
	}
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="")#
for(i in 1:7){#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	legend(10,6,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n")#
	}
help(legend)
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="")#
for(i in 1:7){#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	legend(5,6,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
	}
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="")#
for(i in 1:7){#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	xjitter <- jitter(c(0,3,7,11,17,21))#
	points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
	arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	legend(0,1.5,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=3)#
	}
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,7))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21))#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,7,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,7))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21))#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,7,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21))#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,7,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21))#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,6.75,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=5,height=3)#
par(mar=c(4,4,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,7))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,7,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=6,height=4)#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=16,lwd=2)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,6.75,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=6,height=4)#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,6.75,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=6,height=4)#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole concentration mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,6.75,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
layout(matrix(1:6,nrow=2,byrow=T))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA)#xlab="",ylab="",#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s)#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]])#
	mtext(modnames[i],side=3,line=0.5)#
#	ifelse(i==5){}#
}
layout(matrix(1:6,nrow=2,byrow=T))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA)#xlab="",ylab="",#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,1,1))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,1,1))#
	mtext(modnames[i],side=3,line=0.5)#
#	ifelse(i==5){}#
}
layout(matrix(1:6,nrow=2,byrow=T))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA)#xlab="",ylab="",#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,0,0))#
	mtext(modnames[i],side=3,line=0.5)#
#	ifelse(i==5){}#
}
help(text)
median(c(0:21))
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	ifelse(i%in%c(2,5)){axis(side=2)}#
	ifelse(i%in%c(5:7)){axis(side=1)}	#
}
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}
}
pdf("~/salt-BT-round-2/kinetics_individual.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2)}	#
}#
dev.off()#
#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
means <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,mean))#
ses <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,std.error))#
#
# layout(matrix(1:8,ncol=4,byrow=T))#
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=6,height=4)#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")[i])#
	}#
	legend(2,6.75,modnames, fill=c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen"),bty="n",ncol=2)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.5,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.5,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}#
dev.off()
colors <- c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")
help(axis)
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors)#
	arrows(c(1:7),y0=k_values_nls$k_value + k_values_nls$upperCI, y1= k_values_nls$k_value + k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2)
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,1))#
	arrows(c(1:7),y0=k_values_nls$k_value + k_values_nls$upperCI, y1= k_values_nls$k_value - k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5))#
	arrows(c(1:7),y0=k_values_nls$k_value + k_values_nls$upperCI, y1= k_values_nls$k_value - k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
k_values_nls
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(4,6))#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(7,2))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.5),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(7,2))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.3),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
layout(matrix(c(1:2),ncol=2),widths=c(7,2))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(8,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(7,2))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(10,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	abline(h=0)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual_v2.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}#
dev.off()
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(10.5,6,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),(0.75,0,0)))#,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(10.5,6,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),(0.75,0,0))) #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(10.5,6,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0))) #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
#	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(10.5,6,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}
pdf("~/salt-BT-round-2/kinetics_individual_v2.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(4,6,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual_v2.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(0,6.5,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual_v2.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(0,6.4,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext("Benzotriazole mg/L",side=2,at=6.5,line=2)}	#
}#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=1,line=0.5,at=-4)#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=1,line=0.5,at=-2.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0.5,at=-3)#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0.5,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext("Benzotriazole mg/L",side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext("Fitted value for k",side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
DT50_values_nls <- log(k_values_nls[,1:3])/2#
DT50_valuses_nls$Treatment <- k_values_nls$Treatment
head(k_values_nls)
DT50_values_nls <- log(k_values_nls[,2:4])/2#
DT50_valuses_nls$Treatment <- k_values_nls$Treatment
DT50_values_nls <- log(k_values_nls[,2:4])/2#
DT50_values_nls$Treatment <- k_values_nls$Treatment
DT50
DT50_values_nls
DT50_values_nls <- log(2)/k_values_nls[,2:4]#
DT50_valuses_nls$Treatment <- k_values_nls$Treatment
DT50_values_nls <- log(2)/k_values_nls[,2:4]#
DT50_values_nls$Treatment <- k_values_nls$Treatment
DT50_values_nls
profile
profiles
confint(profiles)
confint(profiles[2])
confint(profiles[[2]])
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual_v2.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
#	polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
#	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
	legend(0,6.4,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext(expression("Benzotriazole "*mu*"g/L"),side=2,at=6.5,line=2)}	#
}#
dev.off()
pdf("~/salt-BT-round-2/kinetics_individual.pdf",width=6,height=5)#
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
#	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
#	legend(0,6.4,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext(expression("Benzotriazole "*mu*"g/L"),side=2,at=6.5,line=2)}	#
}#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,3,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,3,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~day^{-1}),side=2,line=2)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,3,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~day^{-1}),side=2,line=2,at=0)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2,at=-0.05)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2,at=-0.025)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
pdf("~/salt-BT-round-2/kinetics_meansSEs.pdf",width=9,height=4)#
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2,at=-0.01)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)#
dev.off()
k_values_nls
bzt[btz$Day==21,]
bzt[bzt$Day==21,]
range(bzt[bzt$Day==21,])
range(bzt[bzt$Day==21,]$Concentration)
range(bzt[bzt$Day==21,]$Concentration)/5
(1-range(bzt[bzt$Day==21,]$Concentration))/5
(5-range(bzt[bzt$Day==21,]$Concentration))/5
lm(Concentration~Treatment, data = bzt[bzt$Day==21,])
summary(lm(Concentration~Treatment, data = bzt[bzt$Day==21,]))
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,]))
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,],verbose=F))
library(MCMCglmm)
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,],verbose=F))
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,],verbose=F,nitt=101000,burnin=1000,thin=10))
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,],verbose=F,nitt=501000,burnin=1000,thin=10))
(5-range(tapply(bzt[bzt$Day==21,]$Concentration,bzt[bzt$Day==21,]$Treatment,mean )))/5
means
ses
(5-tapply(bzt[bzt$Day==21,]$Concentration,bzt[bzt$Day==21,]$Treatment,mean ))/5
mrange((5-means[6,])/5
range((5-means[6,])/5
)
(5-means[6,])/5
ses[6,]/5
100*(5-means[6,])/5#
100*ses[6,]/5
ls()
rm(list=ls())
setwd("~/salt-BT-round-2 UPLOAD version/minimal set scripts inputs and outputs/")
library(geosphere) #for km bt lat/lon points#
library(MCMCglmm)#
range01=function(x){#
newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
return(newnums)#
}#
#
bw <- colorRampPalette(c(rgb(1,1,1),rgb(0,0,0)))#
#
#a remove missing data function:#
getfull <- function(dat){#
	whichfull <- which(sapply(1:nrow(dat), function(z) any(is.na(dat[z,]) ) )==FALSE)#
	return(whichfull)#
}#
#
#shortcut for coda HPDinterval #
HPDi <- function(vect,prob){#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
}#
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#
MapToWellsBZ <- function(dat,map,firstcol, sumcols, meancols){ #columns labeled "plate" "number",#
		#roi is in the BZT2 files the coordinates of the shape, and "number" is the simple ROI number#
	n <- nrow(map)#
	outdata <- matrix(NA,nrow=n, ncol=(length(sumcols)+length(meancols)+1))#
	for(i in 1:n){#
		rois <- map[i,firstcol:ncol(map)] #what happens to NA values#
		p <- map$plate[i]#
		welldat <- dat[dat$plate==p & dat$number%in%rois,]#
		welldat.sums <- colSums(welldat[,sumcols])#
		welldat.means <- colMeans(welldat[,meancols],na.rm=T)#
		wellstats <- c(nrow(welldat),welldat.sums,welldat.means)#
		outdata[i,] <- wellstats#
		}#
	mappeddata <- cbind(map[,1:(firstcol-1)],outdata)#
	colnames(mappeddata) <- c(colnames(map)[1:(firstcol-1)],"particles",colnames(dat)[sumcols],colnames(dat)[meancols])#
	return(mappeddata)#
}
bzsinfo <- read.csv("locations_info_bzs2.csv")
head(bzsinfo)
bzs2.raw <- read.csv("~/AO BZS.2.ODall.csv",header=T,stringsAsFactors=F)#
#first, need to add coordinates for experimental plate. 2 48-well plates were run for optical density in 1 96-well plate#
#first plate in cols 1-6, next in 7-12 two samples from each well so A went to both A&B in the 96-well ,#
bzs2.raw$plate <- as.numeric(sapply(1:nrow(bzs2.raw), function(z) unlist(strsplit(bzs2.raw$OD.plate[z],split="[.]"))[1] ))#
bzs2.raw$pair <- sapply(1:nrow(bzs2.raw), function(z)   ifelse(bzs2.raw$OD.col[z] <=6, "I","II"))#
bzs2.raw$platepair <- paste(bzs2.raw$plate,bzs2.raw$pair,sep=".")#
bzs2.raw$row <- sapply(bzs2.raw$OD.row, function(z) #
	  if(z == "A" | z == "B") "A" else if(z == "C" | z == "D") "B" else if(z == "E" | z== "F") "C" else "D" )#
bzs2.raw$col <- sapply(bzs2.raw$OD.col, function(z) ifelse(z<= 6, z, z-6))	  #
#
#take the average/midpoint for each well (wells have two measures each)#
fullloc <- paste(bzs2.raw$plate,bzs2.raw$pair,bzs2.raw$row,bzs2.raw$col,sep=".") #
od600 <- tapply(bzs2.raw$OD600.raw, fullloc, mean,na.rm=T)#
od750 <- tapply(bzs2.raw$OD750.raw, fullloc, mean,na.rm=T)#
plate <- tapply(bzs2.raw$plate, fullloc, mean,na.rm=T)#
pair <-  c("I","II")[tapply(as.numeric(as.factor(bzs2.raw$pair)), fullloc, mean,na.rm=T)]#
cols <- tapply(bzs2.raw$col, fullloc, mean,na.rm=T)#
rows <- c("A","B","C","D")[tapply(as.numeric(as.factor(bzs2.raw$row)), fullloc, mean,na.rm=T)]#
##
od_datRawu <- data.frame(plate = plate, pair = pair, row=rows, col = cols,od600 = od600, od750 = od750)#
od_datRaw <- od_datRawu[order(od_datRawu$plate, od_datRawu$pair,od_datRawu$row,od_datRawu$col,decreasing=F ),] #note the tapply(), then this re-sorts so to sort by plate, then ROW then column, which matches clara's frond data sorting#
#sorting still required, because otherwise it's alphabetical by the tapply levels, and plates 10-19 come before plates 2-9 & etc#
#
#frond data#
frondsRaw <- read.csv("~/BZS2 Frond Clara.csv",stringsAsFactors=F,header=T)#
#
#pixel area data, this has extensive processing necessary, continues until line ~270#
endmapu <- read.csv("~/end_map_errorchecked.csv",header=T)#
endmap <- endmapu[order( as.numeric(endmapu$plate), endmapu$row, endmapu$column  ),]#
endfulldat <- read.csv("~/end_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day5mapu <- read.csv("~/Feb18-19_map_errorchecked.csv",header=T)#
day5map <- day5mapu[order( as.numeric(day5mapu$plate), day5mapu$row, day5mapu$column  ),]#
day5fulldat <- read.csv("~/Feb18-19_data_fix472_p1.1_andp39.csv",header=T) # note column X.area is %area from imageJ#
#
day7mapu <- read.csv("~/Feb20-21map_errorchecked.csv",header=T)#
day7map <- day7mapu[order( as.numeric(day7mapu$plate), day7mapu$row, day7mapu$column  ),]#
day7fulldat <- read.csv("~/Feb20-21dat.csv",header=T) # note column X.area is %area from imageJ#
#
startmapu <- read.csv("~/start map ALL.csv",header=T)#
startmap <- startmapu[order( as.numeric(startmapu$plate), startmapu$row, startmapu$column  ),]#
startfulldat <- read.csv("~/start data ALL.csv",header=T) # note column X.area is %area from imageJ#
#
#there is a plate column, but not image name column in the map file. we therefore need to extract plate from the dat file#
colors <- c("(blue)","(green)","(red)")#
# END PLATES#
colorrows <- lapply(colors,function(z) grep(z,endfulldat$label))#
endfulldat2 <- endfulldat[-unlist(colorrows),]#
endfulldat2$redraw <- endfulldat[colorrows[[3]],]$mean#
endfulldat2$greenraw <- endfulldat[colorrows[[2]],]$mean#
endfulldat2$blueraw <- endfulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(endfulldat):#
nrow(endfulldat) == 4*length(colorrows[[3]])#
sum(endfulldat2$area == endfulldat[colorrows[[3]],]$area) == 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[2]],]$area)== 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[1]],]$area)== 0.25*nrow(endfulldat)#
endfulldat2$perred <- endfulldat2$redraw/(3*endfulldat2$mean)#
endfulldat2$pergreen <- endfulldat2$greenraw/(3*endfulldat2$mean)#
endfulldat2$perblue <- endfulldat2$blueraw/(3*endfulldat2$mean)#
##
platepix <- sapply(1:nrow(endfulldat2), function(z) strsplit(#
									strsplit(as.character(endfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
endfulldat2$plate <- platepix#
enddatU <- MapToWellsBZ(endfulldat2,endmap,firstcol=6,sumcols = c(5,7),meancols =c(6,8,10:12,16:18) )#
enddatc <- enddatU[order( as.numeric(enddatU$plate), enddatU$row, enddatU$column  ),]#
#
#FEB20-21, day 7#
colorrows <- lapply(colors,function(z) grep(z,day7fulldat$label))#
day7fulldat2 <- day7fulldat[-unlist(colorrows),]#
day7fulldat2$redraw <- day7fulldat[colorrows[[3]],]$mean#
day7fulldat2$greenraw <- day7fulldat[colorrows[[2]],]$mean#
day7fulldat2$blueraw <- day7fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day7fulldat):#
nrow(day7fulldat) == 4*length(colorrows[[3]])#
sum(day7fulldat2$area == day7fulldat[colorrows[[3]],]$area) == 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[2]],]$area)== 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[1]],]$area)== 0.25*nrow(day7fulldat)#
day7fulldat2$perred <- day7fulldat2$redraw/(3*day7fulldat2$mean)#
day7fulldat2$pergreen <- day7fulldat2$greenraw/(3*day7fulldat2$mean)#
day7fulldat2$perblue <- day7fulldat2$blueraw/(3*day7fulldat2$mean)#
##
platepix <- sapply(1:nrow(day7fulldat2), function(z) strsplit(#
									strsplit(as.character(day7fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day7fulldat2$plate <- platepix#
day7datU <- MapToWellsBZ(day7fulldat2,day7map,firstcol=6,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day7datc <- day7datU[order( as.numeric(day7datU$plate), day7datU$row, day7datU$column  ),]#
#FEB18-19, day 5#
colorrows <- lapply(colors,function(z) grep(z,day5fulldat$label))#
day5fulldat2 <- day5fulldat[-unlist(colorrows),]#
day5fulldat2$redraw <- day5fulldat[colorrows[[3]],]$mean#
day5fulldat2$greenraw <- day5fulldat[colorrows[[2]],]$mean#
day5fulldat2$blueraw <- day5fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day5fulldat):#
nrow(day5fulldat) == 4*length(colorrows[[3]])#
sum(day5fulldat2$area == day5fulldat[colorrows[[3]],]$area) == 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[2]],]$area)== 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[1]],]$area)== 0.25*nrow(day5fulldat)#
day5fulldat2$perred <- day5fulldat2$redraw/(3*day5fulldat2$mean)#
day5fulldat2$pergreen <- day5fulldat2$greenraw/(3*day5fulldat2$mean)#
day5fulldat2$perblue <- day5fulldat2$blueraw/(3*day5fulldat2$mean)#
##
platepix <- sapply(1:nrow(day5fulldat2), function(z) strsplit(#
									strsplit(as.character(day5fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day5fulldat2$plate <- platepix#
day5datU <- MapToWellsBZ(day5fulldat2,day5map,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day5datc <- day5datU[order( as.numeric(day5datU$plate), day5datU$row, day5datU$column  ),]#
#
# START PLATES#
colorrowsS <- lapply(colors,function(z) grep(z,startfulldat$label))#
startfulldat2 <- startfulldat[-unlist(colorrowsS),]#
startfulldat2$redraw <- startfulldat[colorrowsS[[3]],]$mean#
startfulldat2$greenraw <- startfulldat[colorrowsS[[2]],]$mean#
startfulldat2$blueraw <- startfulldat[colorrowsS[[1]],]$mean#
nrow(startfulldat) == 4*length(colorrowsS[[3]])#
sum(startfulldat2$area == startfulldat[colorrowsS[[3]],]$area) == 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[2]],]$area)== 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[1]],]$area)== 0.25*nrow(startfulldat)#
startfulldat2$perred <- startfulldat2$redraw/(3*startfulldat2$mean)#
startfulldat2$pergreen <- startfulldat2$greenraw/(3*startfulldat2$mean)#
startfulldat2$perblue <- startfulldat2$blueraw/(3*startfulldat2$mean)#
platepixS <- sapply(1:nrow(startfulldat2), function(z) strsplit(#
									strsplit(as.character(startfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
startfulldat2$plate <- platepixS#
startdatU <- MapToWellsBZ(startfulldat2,startmap,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
startdatc <- startdatU[order( as.numeric(startdatU$plate), startdatU$row, startdatU$column  ),]#
#
#### convert to square mm of tissue at same time#
#experiment was set up in 2 times steps, plates 1-20; then 21-50#
standarddim <- read.csv("~/wellsizeBZS2photos.csv")#
#conversion factors by day#
pxpmm <- standarddim$pixlength / standarddim$mm.length #standard width between centers of wells, and measures in representative images#
dayofphoto <- c(rep(1,times=960),rep(2,times=1440))#
startdat <- startdatc; day5dat <- day5datc; day7dat<-day7datc; enddat <-enddatc#
startdat$area <- startdatc$area/(pxpmm[dayofphoto])^2 #
day5dat$area <- day5datc$area/(pxpmm[dayofphoto+2])^2 #
day7dat$area <- day7datc$area/(pxpmm[dayofphoto+4])^2 #
enddat$area <-  enddatc$area/(pxpmm[dayofphoto+6])^2   #
arabicpairod <- ifelse(od_datRaw$pair=="I",1,2)#
arabicppod <- as.numeric (paste(od_datRaw$plate,arabicpairod,sep="."))#
# same_sampleid <- paste(arabicplateod,paste(od_datRaw$row,od_datRaw$col,sep=""),sep=".")#
arabicplatefr <- sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][1])#
pairfr <-  sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][2])#
arabicpairfr <-  ifelse(pairfr=="I",1,2)#
arabicppfr <- paste(arabicplatefr,arabicpairfr,sep=".")#
#
#checks that data align as hoped across datasets#
sum(arabicppfr == arabicppod)#
sum(arabicppfr == enddat$plate)#
sum(arabicppfr == startdat$plate)#
sum(frondsRaw$column == od_datRaw$col)#
sum(frondsRaw$column == enddat$column)#
sum(frondsRaw$row == od_datRaw$row)#
sum(frondsRaw$row == enddat$row)#
frondsRaw$arabicpp <- arabicppfr#
od_datRaw$arabicpp <- arabicppod#
#
#remove error rows#
fronds <- frondsRaw[frondsRaw$unfixed.error != "ERROR",]#
od_dat <- od_datRaw[frondsRaw$unfixed.error != "ERROR",]#
endpix <- enddat[frondsRaw$unfixed.error != "ERROR",]#
startpix <- startdat[frondsRaw$unfixed.error != "ERROR",]#
midpix <- day5dat[frondsRaw$unfixed.error != "ERROR",]#
midpix2 <- day7dat[frondsRaw$unfixed.error != "ERROR",]#
#
##
colnames(startpix) <- paste("start",colnames(startdat),sep="_")#
colnames(midpix) <- paste("mid",colnames(midpix),sep="_")#
colnames(midpix2) <- paste("mid2",colnames(midpix2),sep="_")#
#
#fix issue with fronds file:#
#the experiment prep notes in photographs show col6 of platepair 23 should be MNT, col4 of plaitepaire 23 should be SHB#
#in the frond data this is swapped (an error was made in swapping labels, there had been 2 cols of SHB in original design, one column was swapped to MNT but the wrong column was changed in the file)#
fronds$genotype[od_dat$plate==23 & fronds$col==6] <- "Mnt"#
fronds$genotype[od_dat$plate==23 & fronds$col==4] <- "SHB"#
#
biodat <- data.frame(cbind(fronds[1:14],od_dat$od600,od_dat$od750,endpix[,c(2,6:16)],startpix[,c(1,5:15)], midpix[,c(1,5:15)],  midpix2[,c(1,5:15)]))#
biodat$microbeyn <- ifelse(biodat$microbe=="+","Y","N")#
biodatlocs <- sapply(biodat$genotype, function(x) bzsinfo$km.cityC[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$loc <- biodatlocs#
biodat$rddns <- sapply(biodat$genotype, function(x) bzsinfo$roaddens[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$deltapix <- biodat$area - biodat$start_area#
biodat$dpixmid <- biodat$mid_area - biodat$start_area#
biodat$dpix511 <- biodat$area - biodat$mid_area#
biodat$dpixmid2 <- biodat$mid2_area - biodat$start_area#
biodat$dpix711 <- biodat$area - biodat$mid2_area
rm(list=ls*())
rm(list=ls())
library(MCMCglmm)#
range01=function(x){#
newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
return(newnums)#
}#
#
bw <- colorRampPalette(c(rgb(1,1,1),rgb(0,0,0)))#
#
#a remove missing data function:#
getfull <- function(dat){#
	whichfull <- which(sapply(1:nrow(dat), function(z) any(is.na(dat[z,]) ) )==FALSE)#
	return(whichfull)#
}#
#
#shortcut for coda HPDinterval #
HPDi <- function(vect,prob){#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
}#
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#
MapToWellsBZ <- function(dat,map,firstcol, sumcols, meancols){ #columns labeled "plate" "number",#
		#roi is in the BZT2 files the coordinates of the shape, and "number" is the simple ROI number#
	n <- nrow(map)#
	outdata <- matrix(NA,nrow=n, ncol=(length(sumcols)+length(meancols)+1))#
	for(i in 1:n){#
		rois <- map[i,firstcol:ncol(map)] #what happens to NA values#
		p <- map$plate[i]#
		welldat <- dat[dat$plate==p & dat$number%in%rois,]#
		welldat.sums <- colSums(welldat[,sumcols])#
		welldat.means <- colMeans(welldat[,meancols],na.rm=T)#
		wellstats <- c(nrow(welldat),welldat.sums,welldat.means)#
		outdata[i,] <- wellstats#
		}#
	mappeddata <- cbind(map[,1:(firstcol-1)],outdata)#
	colnames(mappeddata) <- c(colnames(map)[1:(firstcol-1)],"particles",colnames(dat)[sumcols],colnames(dat)[meancols])#
	return(mappeddata)#
}#
##################
##Data input and processing#
#################
#
# sampleinfo 		<- read.csv("Lemna_microbiome_barebones_meta_inbzt2.csv",header=T,stringsAsFactors=F)#
# duclocs <- read.csv("Dropbox/duckweed locations Jan11 2018.csv",stringsAsFactors=F,header=T)#
# roaddens <- read.csv("Roaddensityin_locsbzs2.csv",header=T, stringsAsFactors=F)#
# sampleinfo$lat <- unlist(sapply(1:nrow(sampleinfo), function(z) duclocs$lat[which(duclocs[,2]==sampleinfo$site.id[z])]))#
# sampleinfo$lon <- unlist(sapply(1:nrow(sampleinfo), function(z) duclocs$lon[which(duclocs[,2]==sampleinfo$site.id[z])]))#
# issampleinfoinrdense <- sapply(1:nrow(sampleinfo), function(z) sampleinfo$site.id[z]%in%roaddens[,2])#
# roaddensinsi <- unlist(sapply(1:nrow(sampleinfo), function(z) roaddens$road.density.m.km2[which(roaddens[,2]==sampleinfo$site.id[z])]))#
# sampleinfo$roaddens <- rep(NA, times=nrow(sampleinfo))#
# sampleinfo$roaddens[ issampleinfoinrdense] <- roaddensinsi/1000#
# sampleinfo$km.cityC <- distHaversine(matrix(cbind(-1*sampleinfo$lon,sampleinfo$lat),ncol=2),c(-79.3832,43.6532))/1000#
# bzsinfou <- sampleinfo[sampleinfo$fieldormaster=="M"& !is.na(sampleinfo$bzs2),]#
# bzsinfo <- bzsinfou[order(bzsinfou$bzs2),]#
bzsinfo <- read.csv("locations_info_bzs2.csv")#
#
#OD dat#
bzs2.raw <- read.csv("AO BZS.2.ODall.csv",header=T,stringsAsFactors=F)#
#first, need to add coordinates for experimental plate. 2 48-well plates were run for optical density in 1 96-well plate#
#first plate in cols 1-6, next in 7-12 two samples from each well so A went to both A&B in the 96-well ,#
bzs2.raw$plate <- as.numeric(sapply(1:nrow(bzs2.raw), function(z) unlist(strsplit(bzs2.raw$OD.plate[z],split="[.]"))[1] ))#
bzs2.raw$pair <- sapply(1:nrow(bzs2.raw), function(z)   ifelse(bzs2.raw$OD.col[z] <=6, "I","II"))#
bzs2.raw$platepair <- paste(bzs2.raw$plate,bzs2.raw$pair,sep=".")#
bzs2.raw$row <- sapply(bzs2.raw$OD.row, function(z) #
	  if(z == "A" | z == "B") "A" else if(z == "C" | z == "D") "B" else if(z == "E" | z== "F") "C" else "D" )#
bzs2.raw$col <- sapply(bzs2.raw$OD.col, function(z) ifelse(z<= 6, z, z-6))	  #
#
#take the average/midpoint for each well (wells have two measures each)#
fullloc <- paste(bzs2.raw$plate,bzs2.raw$pair,bzs2.raw$row,bzs2.raw$col,sep=".") #
od600 <- tapply(bzs2.raw$OD600.raw, fullloc, mean,na.rm=T)#
od750 <- tapply(bzs2.raw$OD750.raw, fullloc, mean,na.rm=T)#
plate <- tapply(bzs2.raw$plate, fullloc, mean,na.rm=T)#
pair <-  c("I","II")[tapply(as.numeric(as.factor(bzs2.raw$pair)), fullloc, mean,na.rm=T)]#
cols <- tapply(bzs2.raw$col, fullloc, mean,na.rm=T)#
rows <- c("A","B","C","D")[tapply(as.numeric(as.factor(bzs2.raw$row)), fullloc, mean,na.rm=T)]#
##
od_datRawu <- data.frame(plate = plate, pair = pair, row=rows, col = cols,od600 = od600, od750 = od750)#
od_datRaw <- od_datRawu[order(od_datRawu$plate, od_datRawu$pair,od_datRawu$row,od_datRawu$col,decreasing=F ),] #note the tapply(), then this re-sorts so to sort by plate, then ROW then column, which matches clara's frond data sorting#
#sorting still required, because otherwise it's alphabetical by the tapply levels, and plates 10-19 come before plates 2-9 & etc#
#
#frond data#
frondsRaw <- read.csv("BZS2 Frond Clara.csv",stringsAsFactors=F,header=T)#
#
#pixel area data, this has extensive processing necessary, continues until line ~270#
endmapu <- read.csv("end_map_errorchecked.csv",header=T)#
endmap <- endmapu[order( as.numeric(endmapu$plate), endmapu$row, endmapu$column  ),]#
endfulldat <- read.csv("end_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day5mapu <- read.csv("Feb18-19_map_errorchecked.csv",header=T)#
day5map <- day5mapu[order( as.numeric(day5mapu$plate), day5mapu$row, day5mapu$column  ),]#
day5fulldat <- read.csv("Feb18-19_data_fix472_p1.1_andp39.csv",header=T) # note column X.area is %area from imageJ#
#
day7mapu <- read.csv("Feb20-21map_errorchecked.csv",header=T)#
day7map <- day7mapu[order( as.numeric(day7mapu$plate), day7mapu$row, day7mapu$column  ),]#
day7fulldat <- read.csv("Feb20-21dat.csv",header=T) # note column X.area is %area from imageJ#
#
startmapu <- read.csv("start map ALL.csv",header=T)#
startmap <- startmapu[order( as.numeric(startmapu$plate), startmapu$row, startmapu$column  ),]#
startfulldat <- read.csv("start data ALL.csv",header=T) # note column X.area is %area from imageJ#
#
#there is a plate column, but not image name column in the map file. we therefore need to extract plate from the dat file#
colors <- c("(blue)","(green)","(red)")#
# END PLATES#
colorrows <- lapply(colors,function(z) grep(z,endfulldat$label))#
endfulldat2 <- endfulldat[-unlist(colorrows),]#
endfulldat2$redraw <- endfulldat[colorrows[[3]],]$mean#
endfulldat2$greenraw <- endfulldat[colorrows[[2]],]$mean#
endfulldat2$blueraw <- endfulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(endfulldat):#
nrow(endfulldat) == 4*length(colorrows[[3]])#
sum(endfulldat2$area == endfulldat[colorrows[[3]],]$area) == 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[2]],]$area)== 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[1]],]$area)== 0.25*nrow(endfulldat)#
endfulldat2$perred <- endfulldat2$redraw/(3*endfulldat2$mean)#
endfulldat2$pergreen <- endfulldat2$greenraw/(3*endfulldat2$mean)#
endfulldat2$perblue <- endfulldat2$blueraw/(3*endfulldat2$mean)#
##
platepix <- sapply(1:nrow(endfulldat2), function(z) strsplit(#
									strsplit(as.character(endfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
endfulldat2$plate <- platepix#
enddatU <- MapToWellsBZ(endfulldat2,endmap,firstcol=6,sumcols = c(5,7),meancols =c(6,8,10:12,16:18) )#
enddatc <- enddatU[order( as.numeric(enddatU$plate), enddatU$row, enddatU$column  ),]#
#
#FEB20-21, day 7#
colorrows <- lapply(colors,function(z) grep(z,day7fulldat$label))#
day7fulldat2 <- day7fulldat[-unlist(colorrows),]#
day7fulldat2$redraw <- day7fulldat[colorrows[[3]],]$mean#
day7fulldat2$greenraw <- day7fulldat[colorrows[[2]],]$mean#
day7fulldat2$blueraw <- day7fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day7fulldat):#
nrow(day7fulldat) == 4*length(colorrows[[3]])#
sum(day7fulldat2$area == day7fulldat[colorrows[[3]],]$area) == 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[2]],]$area)== 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[1]],]$area)== 0.25*nrow(day7fulldat)#
day7fulldat2$perred <- day7fulldat2$redraw/(3*day7fulldat2$mean)#
day7fulldat2$pergreen <- day7fulldat2$greenraw/(3*day7fulldat2$mean)#
day7fulldat2$perblue <- day7fulldat2$blueraw/(3*day7fulldat2$mean)#
##
platepix <- sapply(1:nrow(day7fulldat2), function(z) strsplit(#
									strsplit(as.character(day7fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day7fulldat2$plate <- platepix#
day7datU <- MapToWellsBZ(day7fulldat2,day7map,firstcol=6,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day7datc <- day7datU[order( as.numeric(day7datU$plate), day7datU$row, day7datU$column  ),]#
#FEB18-19, day 5#
colorrows <- lapply(colors,function(z) grep(z,day5fulldat$label))#
day5fulldat2 <- day5fulldat[-unlist(colorrows),]#
day5fulldat2$redraw <- day5fulldat[colorrows[[3]],]$mean#
day5fulldat2$greenraw <- day5fulldat[colorrows[[2]],]$mean#
day5fulldat2$blueraw <- day5fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day5fulldat):#
nrow(day5fulldat) == 4*length(colorrows[[3]])#
sum(day5fulldat2$area == day5fulldat[colorrows[[3]],]$area) == 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[2]],]$area)== 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[1]],]$area)== 0.25*nrow(day5fulldat)#
day5fulldat2$perred <- day5fulldat2$redraw/(3*day5fulldat2$mean)#
day5fulldat2$pergreen <- day5fulldat2$greenraw/(3*day5fulldat2$mean)#
day5fulldat2$perblue <- day5fulldat2$blueraw/(3*day5fulldat2$mean)#
##
platepix <- sapply(1:nrow(day5fulldat2), function(z) strsplit(#
									strsplit(as.character(day5fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day5fulldat2$plate <- platepix#
day5datU <- MapToWellsBZ(day5fulldat2,day5map,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day5datc <- day5datU[order( as.numeric(day5datU$plate), day5datU$row, day5datU$column  ),]#
#
# START PLATES#
colorrowsS <- lapply(colors,function(z) grep(z,startfulldat$label))#
startfulldat2 <- startfulldat[-unlist(colorrowsS),]#
startfulldat2$redraw <- startfulldat[colorrowsS[[3]],]$mean#
startfulldat2$greenraw <- startfulldat[colorrowsS[[2]],]$mean#
startfulldat2$blueraw <- startfulldat[colorrowsS[[1]],]$mean#
nrow(startfulldat) == 4*length(colorrowsS[[3]])#
sum(startfulldat2$area == startfulldat[colorrowsS[[3]],]$area) == 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[2]],]$area)== 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[1]],]$area)== 0.25*nrow(startfulldat)#
startfulldat2$perred <- startfulldat2$redraw/(3*startfulldat2$mean)#
startfulldat2$pergreen <- startfulldat2$greenraw/(3*startfulldat2$mean)#
startfulldat2$perblue <- startfulldat2$blueraw/(3*startfulldat2$mean)#
platepixS <- sapply(1:nrow(startfulldat2), function(z) strsplit(#
									strsplit(as.character(startfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
startfulldat2$plate <- platepixS#
startdatU <- MapToWellsBZ(startfulldat2,startmap,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
startdatc <- startdatU[order( as.numeric(startdatU$plate), startdatU$row, startdatU$column  ),]#
#
#### convert to square mm of tissue at same time#
#experiment was set up in 2 times steps, plates 1-20; then 21-50#
standarddim <- read.csv("wellsizeBZS2photos.csv")#
#conversion factors by day#
pxpmm <- standarddim$pixlength / standarddim$mm.length #standard width between centers of wells, and measures in representative images#
dayofphoto <- c(rep(1,times=960),rep(2,times=1440))#
startdat <- startdatc; day5dat <- day5datc; day7dat<-day7datc; enddat <-enddatc#
startdat$area <- startdatc$area/(pxpmm[dayofphoto])^2 #
day5dat$area <- day5datc$area/(pxpmm[dayofphoto+2])^2 #
day7dat$area <- day7datc$area/(pxpmm[dayofphoto+4])^2 #
enddat$area <-  enddatc$area/(pxpmm[dayofphoto+6])^2   #
arabicpairod <- ifelse(od_datRaw$pair=="I",1,2)#
arabicppod <- as.numeric (paste(od_datRaw$plate,arabicpairod,sep="."))#
# same_sampleid <- paste(arabicplateod,paste(od_datRaw$row,od_datRaw$col,sep=""),sep=".")#
arabicplatefr <- sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][1])#
pairfr <-  sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][2])#
arabicpairfr <-  ifelse(pairfr=="I",1,2)#
arabicppfr <- paste(arabicplatefr,arabicpairfr,sep=".")#
#
#checks that data align as hoped across datasets#
sum(arabicppfr == arabicppod)#
sum(arabicppfr == enddat$plate)#
sum(arabicppfr == startdat$plate)#
sum(frondsRaw$column == od_datRaw$col)#
sum(frondsRaw$column == enddat$column)#
sum(frondsRaw$row == od_datRaw$row)#
sum(frondsRaw$row == enddat$row)
rm(list=ls())
range01=function(x){#
newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
return(newnums)#
}#
#
bw <- colorRampPalette(c(rgb(1,1,1),rgb(0,0,0)))#
#
#a remove missing data function:#
getfull <- function(dat){#
	whichfull <- which(sapply(1:nrow(dat), function(z) any(is.na(dat[z,]) ) )==FALSE)#
	return(whichfull)#
}#
#
#shortcut for coda HPDinterval #
HPDi <- function(vect,prob){#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
}#
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#
MapToWellsBZ <- function(dat,map,firstcol, sumcols, meancols){ #columns labeled "plate" "number",#
		#roi is in the BZT2 files the coordinates of the shape, and "number" is the simple ROI number#
	n <- nrow(map)#
	outdata <- matrix(NA,nrow=n, ncol=(length(sumcols)+length(meancols)+1))#
	for(i in 1:n){#
		rois <- map[i,firstcol:ncol(map)] #what happens to NA values#
		p <- map$plate[i]#
		welldat <- dat[dat$plate==p & dat$number%in%rois,]#
		welldat.sums <- colSums(welldat[,sumcols])#
		welldat.means <- colMeans(welldat[,meancols],na.rm=T)#
		wellstats <- c(nrow(welldat),welldat.sums,welldat.means)#
		outdata[i,] <- wellstats#
		}#
	mappeddata <- cbind(map[,1:(firstcol-1)],outdata)#
	colnames(mappeddata) <- c(colnames(map)[1:(firstcol-1)],"particles",colnames(dat)[sumcols],colnames(dat)[meancols])#
	return(mappeddata)#
}#
##################
##Data input and processing#
#################
#
# sampleinfo 		<- read.csv("Lemna_microbiome_barebones_meta_inbzt2.csv",header=T,stringsAsFactors=F)#
# duclocs <- read.csv("Dropbox/duckweed locations Jan11 2018.csv",stringsAsFactors=F,header=T)#
# roaddens <- read.csv("Roaddensityin_locsbzs2.csv",header=T, stringsAsFactors=F)#
# sampleinfo$lat <- unlist(sapply(1:nrow(sampleinfo), function(z) duclocs$lat[which(duclocs[,2]==sampleinfo$site.id[z])]))#
# sampleinfo$lon <- unlist(sapply(1:nrow(sampleinfo), function(z) duclocs$lon[which(duclocs[,2]==sampleinfo$site.id[z])]))#
# issampleinfoinrdense <- sapply(1:nrow(sampleinfo), function(z) sampleinfo$site.id[z]%in%roaddens[,2])#
# roaddensinsi <- unlist(sapply(1:nrow(sampleinfo), function(z) roaddens$road.density.m.km2[which(roaddens[,2]==sampleinfo$site.id[z])]))#
# sampleinfo$roaddens <- rep(NA, times=nrow(sampleinfo))#
# sampleinfo$roaddens[ issampleinfoinrdense] <- roaddensinsi/1000#
# sampleinfo$km.cityC <- distHaversine(matrix(cbind(-1*sampleinfo$lon,sampleinfo$lat),ncol=2),c(-79.3832,43.6532))/1000#
# bzsinfou <- sampleinfo[sampleinfo$fieldormaster=="M"& !is.na(sampleinfo$bzs2),]#
# bzsinfo <- bzsinfou[order(bzsinfou$bzs2),]#
bzsinfo <- read.csv("locations_info_bzs2.csv")#
#
#OD dat#
bzs2.raw <- read.csv("AO BZS.2.ODall.csv",header=T,stringsAsFactors=F)#
#first, need to add coordinates for experimental plate. 2 48-well plates were run for optical density in 1 96-well plate#
#first plate in cols 1-6, next in 7-12 two samples from each well so A went to both A&B in the 96-well ,#
bzs2.raw$plate <- as.numeric(sapply(1:nrow(bzs2.raw), function(z) unlist(strsplit(bzs2.raw$OD.plate[z],split="[.]"))[1] ))#
bzs2.raw$pair <- sapply(1:nrow(bzs2.raw), function(z)   ifelse(bzs2.raw$OD.col[z] <=6, "I","II"))#
bzs2.raw$platepair <- paste(bzs2.raw$plate,bzs2.raw$pair,sep=".")#
bzs2.raw$row <- sapply(bzs2.raw$OD.row, function(z) #
	  if(z == "A" | z == "B") "A" else if(z == "C" | z == "D") "B" else if(z == "E" | z== "F") "C" else "D" )#
bzs2.raw$col <- sapply(bzs2.raw$OD.col, function(z) ifelse(z<= 6, z, z-6))	  #
#
#take the average/midpoint for each well (wells have two measures each)#
fullloc <- paste(bzs2.raw$plate,bzs2.raw$pair,bzs2.raw$row,bzs2.raw$col,sep=".") #
od600 <- tapply(bzs2.raw$OD600.raw, fullloc, mean,na.rm=T)#
od750 <- tapply(bzs2.raw$OD750.raw, fullloc, mean,na.rm=T)#
plate <- tapply(bzs2.raw$plate, fullloc, mean,na.rm=T)#
pair <-  c("I","II")[tapply(as.numeric(as.factor(bzs2.raw$pair)), fullloc, mean,na.rm=T)]#
cols <- tapply(bzs2.raw$col, fullloc, mean,na.rm=T)#
rows <- c("A","B","C","D")[tapply(as.numeric(as.factor(bzs2.raw$row)), fullloc, mean,na.rm=T)]#
##
od_datRawu <- data.frame(plate = plate, pair = pair, row=rows, col = cols,od600 = od600, od750 = od750)#
od_datRaw <- od_datRawu[order(od_datRawu$plate, od_datRawu$pair,od_datRawu$row,od_datRawu$col,decreasing=F ),] #note the tapply(), then this re-sorts so to sort by plate, then ROW then column, which matches clara's frond data sorting#
#sorting still required, because otherwise it's alphabetical by the tapply levels, and plates 10-19 come before plates 2-9 & etc#
#
#frond data#
frondsRaw <- read.csv("BZS2 Frond Clara.csv",stringsAsFactors=F,header=T)#
#
#pixel area data, this has extensive processing necessary, continues until line ~270#
endmapu <- read.csv("end_map_errorchecked.csv",header=T)#
endmap <- endmapu[order( as.numeric(endmapu$plate), endmapu$row, endmapu$column  ),]#
endfulldat <- read.csv("end_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day5mapu <- read.csv("Feb18-19_map_errorchecked.csv",header=T)#
day5map <- day5mapu[order( as.numeric(day5mapu$plate), day5mapu$row, day5mapu$column  ),]#
day5fulldat <- read.csv("Feb18-19_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day7mapu <- read.csv("Feb20-21map_errorchecked.csv",header=T)#
day7map <- day7mapu[order( as.numeric(day7mapu$plate), day7mapu$row, day7mapu$column  ),]#
day7fulldat <- read.csv("Feb20-21dat.csv",header=T) # note column X.area is %area from imageJ#
#
startmapu <- read.csv("start map ALL.csv",header=T)#
startmap <- startmapu[order( as.numeric(startmapu$plate), startmapu$row, startmapu$column  ),]#
startfulldat <- read.csv("start data ALL.csv",header=T) # note column X.area is %area from imageJ#
#
#there is a plate column, but not image name column in the map file. we therefore need to extract plate from the dat file#
colors <- c("(blue)","(green)","(red)")#
# END PLATES#
colorrows <- lapply(colors,function(z) grep(z,endfulldat$label))#
endfulldat2 <- endfulldat[-unlist(colorrows),]#
endfulldat2$redraw <- endfulldat[colorrows[[3]],]$mean#
endfulldat2$greenraw <- endfulldat[colorrows[[2]],]$mean#
endfulldat2$blueraw <- endfulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(endfulldat):#
nrow(endfulldat) == 4*length(colorrows[[3]])#
sum(endfulldat2$area == endfulldat[colorrows[[3]],]$area) == 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[2]],]$area)== 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[1]],]$area)== 0.25*nrow(endfulldat)#
endfulldat2$perred <- endfulldat2$redraw/(3*endfulldat2$mean)#
endfulldat2$pergreen <- endfulldat2$greenraw/(3*endfulldat2$mean)#
endfulldat2$perblue <- endfulldat2$blueraw/(3*endfulldat2$mean)#
##
platepix <- sapply(1:nrow(endfulldat2), function(z) strsplit(#
									strsplit(as.character(endfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
endfulldat2$plate <- platepix#
enddatU <- MapToWellsBZ(endfulldat2,endmap,firstcol=6,sumcols = c(5,7),meancols =c(6,8,10:12,16:18) )#
enddatc <- enddatU[order( as.numeric(enddatU$plate), enddatU$row, enddatU$column  ),]#
#
#FEB20-21, day 7#
colorrows <- lapply(colors,function(z) grep(z,day7fulldat$label))#
day7fulldat2 <- day7fulldat[-unlist(colorrows),]#
day7fulldat2$redraw <- day7fulldat[colorrows[[3]],]$mean#
day7fulldat2$greenraw <- day7fulldat[colorrows[[2]],]$mean#
day7fulldat2$blueraw <- day7fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day7fulldat):#
nrow(day7fulldat) == 4*length(colorrows[[3]])#
sum(day7fulldat2$area == day7fulldat[colorrows[[3]],]$area) == 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[2]],]$area)== 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[1]],]$area)== 0.25*nrow(day7fulldat)#
day7fulldat2$perred <- day7fulldat2$redraw/(3*day7fulldat2$mean)#
day7fulldat2$pergreen <- day7fulldat2$greenraw/(3*day7fulldat2$mean)#
day7fulldat2$perblue <- day7fulldat2$blueraw/(3*day7fulldat2$mean)
platepix <- sapply(1:nrow(day7fulldat2), function(z) strsplit(#
									strsplit(as.character(day7fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day7fulldat2$plate <- platepix#
day7datU <- MapToWellsBZ(day7fulldat2,day7map,firstcol=6,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day7datc <- day7datU[order( as.numeric(day7datU$plate), day7datU$row, day7datU$column  ),]#
#FEB18-19, day 5#
colorrows <- lapply(colors,function(z) grep(z,day5fulldat$label))#
day5fulldat2 <- day5fulldat[-unlist(colorrows),]#
day5fulldat2$redraw <- day5fulldat[colorrows[[3]],]$mean#
day5fulldat2$greenraw <- day5fulldat[colorrows[[2]],]$mean#
day5fulldat2$blueraw <- day5fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day5fulldat):#
nrow(day5fulldat) == 4*length(colorrows[[3]])#
sum(day5fulldat2$area == day5fulldat[colorrows[[3]],]$area) == 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[2]],]$area)== 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[1]],]$area)== 0.25*nrow(day5fulldat)#
day5fulldat2$perred <- day5fulldat2$redraw/(3*day5fulldat2$mean)#
day5fulldat2$pergreen <- day5fulldat2$greenraw/(3*day5fulldat2$mean)#
day5fulldat2$perblue <- day5fulldat2$blueraw/(3*day5fulldat2$mean)#
##
platepix <- sapply(1:nrow(day5fulldat2), function(z) strsplit(#
									strsplit(as.character(day5fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day5fulldat2$plate <- platepix#
day5datU <- MapToWellsBZ(day5fulldat2,day5map,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day5datc <- day5datU[order( as.numeric(day5datU$plate), day5datU$row, day5datU$column  ),]#
#
# START PLATES#
colorrowsS <- lapply(colors,function(z) grep(z,startfulldat$label))#
startfulldat2 <- startfulldat[-unlist(colorrowsS),]#
startfulldat2$redraw <- startfulldat[colorrowsS[[3]],]$mean#
startfulldat2$greenraw <- startfulldat[colorrowsS[[2]],]$mean#
startfulldat2$blueraw <- startfulldat[colorrowsS[[1]],]$mean#
nrow(startfulldat) == 4*length(colorrowsS[[3]])#
sum(startfulldat2$area == startfulldat[colorrowsS[[3]],]$area) == 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[2]],]$area)== 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[1]],]$area)== 0.25*nrow(startfulldat)#
startfulldat2$perred <- startfulldat2$redraw/(3*startfulldat2$mean)#
startfulldat2$pergreen <- startfulldat2$greenraw/(3*startfulldat2$mean)#
startfulldat2$perblue <- startfulldat2$blueraw/(3*startfulldat2$mean)#
platepixS <- sapply(1:nrow(startfulldat2), function(z) strsplit(#
									strsplit(as.character(startfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
startfulldat2$plate <- platepixS#
startdatU <- MapToWellsBZ(startfulldat2,startmap,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
startdatc <- startdatU[order( as.numeric(startdatU$plate), startdatU$row, startdatU$column  ),]#
#
#### convert to square mm of tissue at same time#
#experiment was set up in 2 times steps, plates 1-20; then 21-50#
standarddim <- read.csv("wellsizeBZS2photos.csv")#
#conversion factors by day#
pxpmm <- standarddim$pixlength / standarddim$mm.length #standard width between centers of wells, and measures in representative images#
dayofphoto <- c(rep(1,times=960),rep(2,times=1440))#
startdat <- startdatc; day5dat <- day5datc; day7dat<-day7datc; enddat <-enddatc#
startdat$area <- startdatc$area/(pxpmm[dayofphoto])^2 #
day5dat$area <- day5datc$area/(pxpmm[dayofphoto+2])^2 #
day7dat$area <- day7datc$area/(pxpmm[dayofphoto+4])^2 #
enddat$area <-  enddatc$area/(pxpmm[dayofphoto+6])^2   #
arabicpairod <- ifelse(od_datRaw$pair=="I",1,2)#
arabicppod <- as.numeric (paste(od_datRaw$plate,arabicpairod,sep="."))#
# same_sampleid <- paste(arabicplateod,paste(od_datRaw$row,od_datRaw$col,sep=""),sep=".")#
arabicplatefr <- sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][1])#
pairfr <-  sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][2])#
arabicpairfr <-  ifelse(pairfr=="I",1,2)#
arabicppfr <- paste(arabicplatefr,arabicpairfr,sep=".")#
#
#checks that data align as hoped across datasets#
sum(arabicppfr == arabicppod)#
sum(arabicppfr == enddat$plate)#
sum(arabicppfr == startdat$plate)#
sum(frondsRaw$column == od_datRaw$col)#
sum(frondsRaw$column == enddat$column)#
sum(frondsRaw$row == od_datRaw$row)#
sum(frondsRaw$row == enddat$row)
frondsRaw$arabicpp <- arabicppfr#
od_datRaw$arabicpp <- arabicppod#
#
#remove error rows#
fronds <- frondsRaw[frondsRaw$unfixed.error != "ERROR",]#
od_dat <- od_datRaw[frondsRaw$unfixed.error != "ERROR",]#
endpix <- enddat[frondsRaw$unfixed.error != "ERROR",]#
startpix <- startdat[frondsRaw$unfixed.error != "ERROR",]#
midpix <- day5dat[frondsRaw$unfixed.error != "ERROR",]#
midpix2 <- day7dat[frondsRaw$unfixed.error != "ERROR",]#
#
##
colnames(startpix) <- paste("start",colnames(startdat),sep="_")#
colnames(midpix) <- paste("mid",colnames(midpix),sep="_")#
colnames(midpix2) <- paste("mid2",colnames(midpix2),sep="_")#
#
#fix issue with fronds file:#
#the experiment prep notes in photographs show col6 of platepair 23 should be MNT, col4 of plaitepaire 23 should be SHB#
#in the frond data this is swapped (an error was made in swapping labels, there had been 2 cols of SHB in original design, one column was swapped to MNT but the wrong column was changed in the file)#
fronds$genotype[od_dat$plate==23 & fronds$col==6] <- "Mnt"#
fronds$genotype[od_dat$plate==23 & fronds$col==4] <- "SHB"#
#
biodat <- data.frame(cbind(fronds[1:14],od_dat$od600,od_dat$od750,endpix[,c(2,6:16)],startpix[,c(1,5:15)], midpix[,c(1,5:15)],  midpix2[,c(1,5:15)]))#
biodat$microbeyn <- ifelse(biodat$microbe=="+","Y","N")#
biodatlocs <- sapply(biodat$genotype, function(x) bzsinfo$km.cityC[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$loc <- biodatlocs#
biodat$rddns <- sapply(biodat$genotype, function(x) bzsinfo$roaddens[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$deltapix <- biodat$area - biodat$start_area#
biodat$dpixmid <- biodat$mid_area - biodat$start_area#
biodat$dpix511 <- biodat$area - biodat$mid_area#
biodat$dpixmid2 <- biodat$mid2_area - biodat$start_area#
biodat$dpix711 <- biodat$area - biodat$mid2_area
dpixRbest <- MCMCglmm(deltapix~rddns +  microbe + BZT + Salt + BZT:Salt + microbe:Salt, #
						data=biodat,verbose=F, nitt=100000,thin=10,burnin=10000,pr=T)#
summary(dpixRbest)
bzsinfo <- read.csv("locations_info_bzs2.csv")#
#OD dat#
bzs2.raw <- read.csv("AO BZS.2.ODall.csv",header=T,stringsAsFactors=F)#
#first, need to add coordinates for experimental plate. 2 48-well plates were run for optical density in 1 96-well plate#
#first plate in cols 1-6, next in 7-12 two samples from each well so A went to both A&B in the 96-well ,#
bzs2.raw$plate <- as.numeric(sapply(1:nrow(bzs2.raw), function(z) unlist(strsplit(bzs2.raw$OD.plate[z],split="[.]"))[1] ))#
bzs2.raw$pair <- sapply(1:nrow(bzs2.raw), function(z)   ifelse(bzs2.raw$OD.col[z] <=6, "I","II"))#
bzs2.raw$platepair <- paste(bzs2.raw$plate,bzs2.raw$pair,sep=".")#
bzs2.raw$row <- sapply(bzs2.raw$OD.row, function(z) #
	  if(z == "A" | z == "B") "A" else if(z == "C" | z == "D") "B" else if(z == "E" | z== "F") "C" else "D" )#
bzs2.raw$col <- sapply(bzs2.raw$OD.col, function(z) ifelse(z<= 6, z, z-6))	  #
#
#take the average/midpoint for each well (wells have two measures each)#
fullloc <- paste(bzs2.raw$plate,bzs2.raw$pair,bzs2.raw$row,bzs2.raw$col,sep=".") #
od600 <- tapply(bzs2.raw$OD600.raw, fullloc, mean,na.rm=T)#
od750 <- tapply(bzs2.raw$OD750.raw, fullloc, mean,na.rm=T)#
plate <- tapply(bzs2.raw$plate, fullloc, mean,na.rm=T)#
pair <-  c("I","II")[tapply(as.numeric(as.factor(bzs2.raw$pair)), fullloc, mean,na.rm=T)]#
cols <- tapply(bzs2.raw$col, fullloc, mean,na.rm=T)#
rows <- c("A","B","C","D")[tapply(as.numeric(as.factor(bzs2.raw$row)), fullloc, mean,na.rm=T)]#
##
od_datRawu <- data.frame(plate = plate, pair = pair, row=rows, col = cols,od600 = od600, od750 = od750)#
od_datRaw <- od_datRawu[order(od_datRawu$plate, od_datRawu$pair,od_datRawu$row,od_datRawu$col,decreasing=F ),] #note the tapply(), then this re-sorts so to sort by plate, then ROW then column, which matches clara's frond data sorting#
#sorting still required, because otherwise it's alphabetical by the tapply levels, and plates 10-19 come before plates 2-9 & etc#
#
#frond data#
frondsRaw <- read.csv("BZS2 Frond Clara.csv",stringsAsFactors=F,header=T)#
#
#pixel area data, this has extensive processing necessary, continues until line ~270#
endmapu <- read.csv("end_map_errorchecked.csv",header=T)#
endmap <- endmapu[order( as.numeric(endmapu$plate), endmapu$row, endmapu$column  ),]#
endfulldat <- read.csv("end_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day5mapu <- read.csv("Feb18-19_map_errorchecked.csv",header=T)#
day5map <- day5mapu[order( as.numeric(day5mapu$plate), day5mapu$row, day5mapu$column  ),]#
day5fulldat <- read.csv("Feb18-19_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day7mapu <- read.csv("Feb20-21map_errorchecked.csv",header=T)#
day7map <- day7mapu[order( as.numeric(day7mapu$plate), day7mapu$row, day7mapu$column  ),]#
day7fulldat <- read.csv("Feb20-21dat.csv",header=T) # note column X.area is %area from imageJ#
#
startmapu <- read.csv("start map ALL.csv",header=T)#
startmap <- startmapu[order( as.numeric(startmapu$plate), startmapu$row, startmapu$column  ),]#
startfulldat <- read.csv("start data ALL.csv",header=T) # note column X.area is %area from imageJ#
#
#there is a plate column, but not image name column in the map file. we therefore need to extract plate from the dat file#
colors <- c("(blue)","(green)","(red)")#
# END PLATES#
colorrows <- lapply(colors,function(z) grep(z,endfulldat$label))#
endfulldat2 <- endfulldat[-unlist(colorrows),]#
endfulldat2$redraw <- endfulldat[colorrows[[3]],]$mean#
endfulldat2$greenraw <- endfulldat[colorrows[[2]],]$mean#
endfulldat2$blueraw <- endfulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(endfulldat):#
nrow(endfulldat) == 4*length(colorrows[[3]])#
sum(endfulldat2$area == endfulldat[colorrows[[3]],]$area) == 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[2]],]$area)== 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[1]],]$area)== 0.25*nrow(endfulldat)#
endfulldat2$perred <- endfulldat2$redraw/(3*endfulldat2$mean)#
endfulldat2$pergreen <- endfulldat2$greenraw/(3*endfulldat2$mean)#
endfulldat2$perblue <- endfulldat2$blueraw/(3*endfulldat2$mean)#
##
platepix <- sapply(1:nrow(endfulldat2), function(z) strsplit(#
									strsplit(as.character(endfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
endfulldat2$plate <- platepix#
enddatU <- MapToWellsBZ(endfulldat2,endmap,firstcol=6,sumcols = c(5,7),meancols =c(6,8,10:12,16:18) )#
enddatc <- enddatU[order( as.numeric(enddatU$plate), enddatU$row, enddatU$column  ),]#
#
#FEB20-21, day 7#
colorrows <- lapply(colors,function(z) grep(z,day7fulldat$label))#
day7fulldat2 <- day7fulldat[-unlist(colorrows),]#
day7fulldat2$redraw <- day7fulldat[colorrows[[3]],]$mean#
day7fulldat2$greenraw <- day7fulldat[colorrows[[2]],]$mean#
day7fulldat2$blueraw <- day7fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day7fulldat):#
nrow(day7fulldat) == 4*length(colorrows[[3]])#
sum(day7fulldat2$area == day7fulldat[colorrows[[3]],]$area) == 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[2]],]$area)== 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[1]],]$area)== 0.25*nrow(day7fulldat)#
day7fulldat2$perred <- day7fulldat2$redraw/(3*day7fulldat2$mean)#
day7fulldat2$pergreen <- day7fulldat2$greenraw/(3*day7fulldat2$mean)#
day7fulldat2$perblue <- day7fulldat2$blueraw/(3*day7fulldat2$mean)#
##
platepix <- sapply(1:nrow(day7fulldat2), function(z) strsplit(#
									strsplit(as.character(day7fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day7fulldat2$plate <- platepix#
day7datU <- MapToWellsBZ(day7fulldat2,day7map,firstcol=6,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day7datc <- day7datU[order( as.numeric(day7datU$plate), day7datU$row, day7datU$column  ),]#
#FEB18-19, day 5#
colorrows <- lapply(colors,function(z) grep(z,day5fulldat$label))#
day5fulldat2 <- day5fulldat[-unlist(colorrows),]#
day5fulldat2$redraw <- day5fulldat[colorrows[[3]],]$mean#
day5fulldat2$greenraw <- day5fulldat[colorrows[[2]],]$mean#
day5fulldat2$blueraw <- day5fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day5fulldat):#
nrow(day5fulldat) == 4*length(colorrows[[3]])#
sum(day5fulldat2$area == day5fulldat[colorrows[[3]],]$area) == 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[2]],]$area)== 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[1]],]$area)== 0.25*nrow(day5fulldat)#
day5fulldat2$perred <- day5fulldat2$redraw/(3*day5fulldat2$mean)#
day5fulldat2$pergreen <- day5fulldat2$greenraw/(3*day5fulldat2$mean)#
day5fulldat2$perblue <- day5fulldat2$blueraw/(3*day5fulldat2$mean)#
##
platepix <- sapply(1:nrow(day5fulldat2), function(z) strsplit(#
									strsplit(as.character(day5fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day5fulldat2$plate <- platepix#
day5datU <- MapToWellsBZ(day5fulldat2,day5map,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day5datc <- day5datU[order( as.numeric(day5datU$plate), day5datU$row, day5datU$column  ),]#
#
# START PLATES#
colorrowsS <- lapply(colors,function(z) grep(z,startfulldat$label))#
startfulldat2 <- startfulldat[-unlist(colorrowsS),]#
startfulldat2$redraw <- startfulldat[colorrowsS[[3]],]$mean#
startfulldat2$greenraw <- startfulldat[colorrowsS[[2]],]$mean#
startfulldat2$blueraw <- startfulldat[colorrowsS[[1]],]$mean#
nrow(startfulldat) == 4*length(colorrowsS[[3]])#
sum(startfulldat2$area == startfulldat[colorrowsS[[3]],]$area) == 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[2]],]$area)== 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[1]],]$area)== 0.25*nrow(startfulldat)#
startfulldat2$perred <- startfulldat2$redraw/(3*startfulldat2$mean)#
startfulldat2$pergreen <- startfulldat2$greenraw/(3*startfulldat2$mean)#
startfulldat2$perblue <- startfulldat2$blueraw/(3*startfulldat2$mean)#
platepixS <- sapply(1:nrow(startfulldat2), function(z) strsplit(#
									strsplit(as.character(startfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
startfulldat2$plate <- platepixS#
startdatU <- MapToWellsBZ(startfulldat2,startmap,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
startdatc <- startdatU[order( as.numeric(startdatU$plate), startdatU$row, startdatU$column  ),]#
#
#### convert to square mm of tissue at same time#
#experiment was set up in 2 times steps, plates 1-20; then 21-50#
standarddim <- read.csv("wellsizeBZS2photos.csv")#
#conversion factors by day#
pxpmm <- standarddim$pixlength / standarddim$mm.length #standard width between centers of wells, and measures in representative images#
dayofphoto <- c(rep(1,times=960),rep(2,times=1440))#
startdat <- startdatc; day5dat <- day5datc; day7dat<-day7datc; enddat <-enddatc#
startdat$area <- startdatc$area/(pxpmm[dayofphoto])^2 #
day5dat$area <- day5datc$area/(pxpmm[dayofphoto+2])^2 #
day7dat$area <- day7datc$area/(pxpmm[dayofphoto+4])^2 #
enddat$area <-  enddatc$area/(pxpmm[dayofphoto+6])^2   #
arabicpairod <- ifelse(od_datRaw$pair=="I",1,2)#
arabicppod <- as.numeric (paste(od_datRaw$plate,arabicpairod,sep="."))#
# same_sampleid <- paste(arabicplateod,paste(od_datRaw$row,od_datRaw$col,sep=""),sep=".")#
arabicplatefr <- sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][1])#
pairfr <-  sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][2])#
arabicpairfr <-  ifelse(pairfr=="I",1,2)#
arabicppfr <- paste(arabicplatefr,arabicpairfr,sep=".")#
#
#checks that data align as hoped across datasets#
sum(arabicppfr == arabicppod)#
sum(arabicppfr == enddat$plate)#
sum(arabicppfr == startdat$plate)#
sum(frondsRaw$column == od_datRaw$col)#
sum(frondsRaw$column == enddat$column)#
sum(frondsRaw$row == od_datRaw$row)#
sum(frondsRaw$row == enddat$row)#
frondsRaw$arabicpp <- arabicppfr#
od_datRaw$arabicpp <- arabicppod#
#
#remove error rows#
fronds <- frondsRaw[frondsRaw$unfixed.error != "ERROR",]#
od_dat <- od_datRaw[frondsRaw$unfixed.error != "ERROR",]#
endsqm <- enddat[frondsRaw$unfixed.error != "ERROR",]#
startpix <- startdat[frondsRaw$unfixed.error != "ERROR",]#
midsqm <- day5dat[frondsRaw$unfixed.error != "ERROR",]#
midsqm2 <- day7dat[frondsRaw$unfixed.error != "ERROR",]#
#
##
colnames(startpix) <- paste("start",colnames(startdat),sep="_")#
colnames(midsqm) <- paste("mid",colnames(midsqm),sep="_")#
colnames(midsqm2) <- paste("mid2",colnames(midsqm2),sep="_")#
#
#fix issue with fronds file:#
#the experiment prep notes in photographs show col6 of platepair 23 should be MNT, col4 of plaitepaire 23 should be SHB#
#in the frond data this is swapped (an error was made in swapping labels, there had been 2 cols of SHB in original design, one column was swapped to MNT but the wrong column was changed in the file)#
fronds$genotype[od_dat$plate==23 & fronds$col==6] <- "Mnt"#
fronds$genotype[od_dat$plate==23 & fronds$col==4] <- "SHB"#
#
biodat <- data.frame(cbind(fronds[1:14],od_dat$od600,od_dat$od750,endsqm[,c(2,6:16)],startpix[,c(1,5:15)], midsqm[,c(1,5:15)],  midsqm2[,c(1,5:15)]))#
biodat$microbeyn <- ifelse(biodat$microbe=="+","Y","N")#
biodatlocs <- sapply(biodat$genotype, function(x) bzsinfo$km.cityC[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$loc <- biodatlocs#
biodat$rddns <- sapply(biodat$genotype, function(x) bzsinfo$roaddens[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$deltasqmm <- biodat$area - biodat$start_area #note these are all in units of square millimeters of area. but were measured from pixels#
biodat$dsqmmid <- biodat$mid_area - biodat$start_area#
biodat$dsqm511 <- biodat$area - biodat$mid_area#
biodat$dsqmmid2 <- biodat$mid2_area - biodat$start_area#
biodat$dsqm711 <- biodat$area - biodat$mid2_area#
write.csv(biodat,"biodat.csv",row.names=F)
dsqmRbest <- MCMCglmm(deltasqmm~rddns +  microbe + BZT + Salt + BZT:Salt + microbe:Salt, #
						data=biodat,verbose=F, nitt=100000,thin=10,burnin=10000,pr=T)#
summary(dsqmRbest)#
rd.s <- seq(from=min(biodat$rddns),to=max(biodat$rddns),length.out=1000)#
dpxsolrd <- dsqmRbest$Sol#
dpxng.mnrd <- sapply(1:length(rd.s), function(z) mean(dpxsolrd[,1]+ dpxsolrd[,2]*rd.s[z] + dpxsolrd[,3]*0.5 + dpxsolrd[,4]*0.5+ dpxsolrd[,5]*0.5 + dpxsolrd[,6]*0.5 + dpxsolrd[,7]*0.5) )#
dpxng.hpdird <- sapply(1:length(rd.s), function(z) HPDi(dpxsolrd[,1]+ dpxsolrd[,2]*rd.s[z] + dpxsolrd[,3]*0.5 + dpxsolrd[,4]*0.5+ dpxsolrd[,5]*0.5 + dpxsolrd[,6]*0.5 + dpxsolrd[,7]*0.5, 0.95) )#
dsqmrdmn <- tapply(biodat$deltasqmm,biodat$rddns,mean)#
rdrd <- tapply(biodat$rddns,biodat$rddns,mean)#
dsqm.mns <- tapply(biodat$deltasqmm, paste(biodat$microbe,biodat$Salt,biodat$BZT),mean)#
dsqm.ses <- tapply(biodat$deltasqmm, paste(biodat$microbe,biodat$Salt,biodat$BZT),std.error)#
#OPTICAL DENSITY#
#testing normality assumption, and taking log to address issue#
shapiro.test((biodat$od_dat.od600))#
shapiro.test((biodat$od_dat.od750))#
shapiro.test(log(biodat$od_dat.od600+min(biodat$od_dat.od600[biodat$od_dat.od600>0],na.rm=T)))#
shapiro.test(log(biodat$od_dat.od750+min(biodat$od_dat.od750[biodat$od_dat.od750>0],na.rm=T)))#
biodat$lnod600 <- log(biodat$od_dat.od600+ min(biodat$od_dat.od600[biodat$od_dat.od600>0],na.rm=T ) )#
biodat$lnod750 <- log(biodat$od_dat.od750+ min(biodat$od_dat.od750[biodat$od_dat.od750>0],na.rm=T ) )#
#
bioMdat <- biodat[biodat$microbe=="+",]#
#
inocModng <- MCMCglmm(lnod600 ~microbe,data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)#
summary(inocModng) #
#therefore + and - are more "disrupted" and "local"#
inocmns <- tapply(biodat$lnod600,biodat$microbe,mean,na.rm=T)#
inocses <- tapply(biodat$lnod600,biodat$microbe,std.error,na.rm=T)
bzsinfo <- read.csv("locations_info_bzs2.csv")#
#OD dat#
bzs2.raw <- read.csv("AO BZS.2.ODall.csv",header=T,stringsAsFactors=F)#
#first, need to add coordinates for experimental plate. 2 48-well plates were run for optical density in 1 96-well plate#
#first plate in cols 1-6, next in 7-12 two samples from each well so A went to both A&B in the 96-well ,#
bzs2.raw$plate <- as.numeric(sapply(1:nrow(bzs2.raw), function(z) unlist(strsplit(bzs2.raw$OD.plate[z],split="[.]"))[1] ))#
bzs2.raw$pair <- sapply(1:nrow(bzs2.raw), function(z)   ifelse(bzs2.raw$OD.col[z] <=6, "I","II"))#
bzs2.raw$platepair <- paste(bzs2.raw$plate,bzs2.raw$pair,sep=".")#
bzs2.raw$row <- sapply(bzs2.raw$OD.row, function(z) #
	  if(z == "A" | z == "B") "A" else if(z == "C" | z == "D") "B" else if(z == "E" | z== "F") "C" else "D" )#
bzs2.raw$col <- sapply(bzs2.raw$OD.col, function(z) ifelse(z<= 6, z, z-6))	  #
#
#take the average/midpoint for each well (wells have two measures each)#
fullloc <- paste(bzs2.raw$plate,bzs2.raw$pair,bzs2.raw$row,bzs2.raw$col,sep=".") #
od600 <- tapply(bzs2.raw$OD600.raw, fullloc, mean,na.rm=T)#
od750 <- tapply(bzs2.raw$OD750.raw, fullloc, mean,na.rm=T)#
plate <- tapply(bzs2.raw$plate, fullloc, mean,na.rm=T)#
pair <-  c("I","II")[tapply(as.numeric(as.factor(bzs2.raw$pair)), fullloc, mean,na.rm=T)]#
cols <- tapply(bzs2.raw$col, fullloc, mean,na.rm=T)#
rows <- c("A","B","C","D")[tapply(as.numeric(as.factor(bzs2.raw$row)), fullloc, mean,na.rm=T)]#
##
od_datRawu <- data.frame(plate = plate, pair = pair, row=rows, col = cols,od600 = od600, od750 = od750)#
od_datRaw <- od_datRawu[order(od_datRawu$plate, od_datRawu$pair,od_datRawu$row,od_datRawu$col,decreasing=F ),] #note the tapply(), then this re-sorts so to sort by plate, then ROW then column, which matches clara's frond data sorting#
#sorting still required, because otherwise it's alphabetical by the tapply levels, and plates 10-19 come before plates 2-9 & etc#
#
#frond data#
frondsRaw <- read.csv("BZS2 Frond Clara.csv",stringsAsFactors=F,header=T)#
#
#pixel area data, this has extensive processing necessary, continues until line ~270#
endmapu <- read.csv("end_map_errorchecked.csv",header=T)#
endmap <- endmapu[order( as.numeric(endmapu$plate), endmapu$row, endmapu$column  ),]#
endfulldat <- read.csv("end_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day5mapu <- read.csv("Feb18-19_map_errorchecked.csv",header=T)#
day5map <- day5mapu[order( as.numeric(day5mapu$plate), day5mapu$row, day5mapu$column  ),]#
day5fulldat <- read.csv("Feb18-19_data_errorchecked.csv",header=T) # note column X.area is %area from imageJ#
#
day7mapu <- read.csv("Feb20-21map_errorchecked.csv",header=T)#
day7map <- day7mapu[order( as.numeric(day7mapu$plate), day7mapu$row, day7mapu$column  ),]#
day7fulldat <- read.csv("Feb20-21dat.csv",header=T) # note column X.area is %area from imageJ#
#
startmapu <- read.csv("start map ALL.csv",header=T)#
startmap <- startmapu[order( as.numeric(startmapu$plate), startmapu$row, startmapu$column  ),]#
startfulldat <- read.csv("start data ALL.csv",header=T) # note column X.area is %area from imageJ#
#
#there is a plate column, but not image name column in the map file. we therefore need to extract plate from the dat file#
colors <- c("(blue)","(green)","(red)")#
# END PLATES#
colorrows <- lapply(colors,function(z) grep(z,endfulldat$label))#
endfulldat2 <- endfulldat[-unlist(colorrows),]#
endfulldat2$redraw <- endfulldat[colorrows[[3]],]$mean#
endfulldat2$greenraw <- endfulldat[colorrows[[2]],]$mean#
endfulldat2$blueraw <- endfulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(endfulldat):#
nrow(endfulldat) == 4*length(colorrows[[3]])#
sum(endfulldat2$area == endfulldat[colorrows[[3]],]$area) == 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[2]],]$area)== 0.25*nrow(endfulldat)#
sum(endfulldat2$area == endfulldat[colorrows[[1]],]$area)== 0.25*nrow(endfulldat)#
endfulldat2$perred <- endfulldat2$redraw/(3*endfulldat2$mean)#
endfulldat2$pergreen <- endfulldat2$greenraw/(3*endfulldat2$mean)#
endfulldat2$perblue <- endfulldat2$blueraw/(3*endfulldat2$mean)#
##
platepix <- sapply(1:nrow(endfulldat2), function(z) strsplit(#
									strsplit(as.character(endfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
endfulldat2$plate <- platepix#
enddatU <- MapToWellsBZ(endfulldat2,endmap,firstcol=6,sumcols = c(5,7),meancols =c(6,8,10:12,16:18) )#
enddatc <- enddatU[order( as.numeric(enddatU$plate), enddatU$row, enddatU$column  ),]#
#
#FEB20-21, day 7#
colorrows <- lapply(colors,function(z) grep(z,day7fulldat$label))#
day7fulldat2 <- day7fulldat[-unlist(colorrows),]#
day7fulldat2$redraw <- day7fulldat[colorrows[[3]],]$mean#
day7fulldat2$greenraw <- day7fulldat[colorrows[[2]],]$mean#
day7fulldat2$blueraw <- day7fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day7fulldat):#
nrow(day7fulldat) == 4*length(colorrows[[3]])#
sum(day7fulldat2$area == day7fulldat[colorrows[[3]],]$area) == 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[2]],]$area)== 0.25*nrow(day7fulldat)#
sum(day7fulldat2$area == day7fulldat[colorrows[[1]],]$area)== 0.25*nrow(day7fulldat)#
day7fulldat2$perred <- day7fulldat2$redraw/(3*day7fulldat2$mean)#
day7fulldat2$pergreen <- day7fulldat2$greenraw/(3*day7fulldat2$mean)#
day7fulldat2$perblue <- day7fulldat2$blueraw/(3*day7fulldat2$mean)#
##
platepix <- sapply(1:nrow(day7fulldat2), function(z) strsplit(#
									strsplit(as.character(day7fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day7fulldat2$plate <- platepix#
day7datU <- MapToWellsBZ(day7fulldat2,day7map,firstcol=6,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day7datc <- day7datU[order( as.numeric(day7datU$plate), day7datU$row, day7datU$column  ),]#
#FEB18-19, day 5#
colorrows <- lapply(colors,function(z) grep(z,day5fulldat$label))#
day5fulldat2 <- day5fulldat[-unlist(colorrows),]#
day5fulldat2$redraw <- day5fulldat[colorrows[[3]],]$mean#
day5fulldat2$greenraw <- day5fulldat[colorrows[[2]],]$mean#
day5fulldat2$blueraw <- day5fulldat[colorrows[[1]],]$mean#
##CHECK THAT THEY LINE UP, should be 1/4 nrow(day5fulldat):#
nrow(day5fulldat) == 4*length(colorrows[[3]])#
sum(day5fulldat2$area == day5fulldat[colorrows[[3]],]$area) == 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[2]],]$area)== 0.25*nrow(day5fulldat)#
sum(day5fulldat2$area == day5fulldat[colorrows[[1]],]$area)== 0.25*nrow(day5fulldat)#
day5fulldat2$perred <- day5fulldat2$redraw/(3*day5fulldat2$mean)#
day5fulldat2$pergreen <- day5fulldat2$greenraw/(3*day5fulldat2$mean)#
day5fulldat2$perblue <- day5fulldat2$blueraw/(3*day5fulldat2$mean)#
##
platepix <- sapply(1:nrow(day5fulldat2), function(z) strsplit(#
									strsplit(as.character(day5fulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
day5fulldat2$plate <- platepix#
day5datU <- MapToWellsBZ(day5fulldat2,day5map,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
day5datc <- day5datU[order( as.numeric(day5datU$plate), day5datU$row, day5datU$column  ),]#
#
# START PLATES#
colorrowsS <- lapply(colors,function(z) grep(z,startfulldat$label))#
startfulldat2 <- startfulldat[-unlist(colorrowsS),]#
startfulldat2$redraw <- startfulldat[colorrowsS[[3]],]$mean#
startfulldat2$greenraw <- startfulldat[colorrowsS[[2]],]$mean#
startfulldat2$blueraw <- startfulldat[colorrowsS[[1]],]$mean#
nrow(startfulldat) == 4*length(colorrowsS[[3]])#
sum(startfulldat2$area == startfulldat[colorrowsS[[3]],]$area) == 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[2]],]$area)== 0.25*nrow(startfulldat)#
sum(startfulldat2$area == startfulldat[colorrowsS[[1]],]$area)== 0.25*nrow(startfulldat)#
startfulldat2$perred <- startfulldat2$redraw/(3*startfulldat2$mean)#
startfulldat2$pergreen <- startfulldat2$greenraw/(3*startfulldat2$mean)#
startfulldat2$perblue <- startfulldat2$blueraw/(3*startfulldat2$mean)#
platepixS <- sapply(1:nrow(startfulldat2), function(z) strsplit(#
									strsplit(as.character(startfulldat2$label[z]),"plate",fixed=T)[[1]][[2]],#
										".J") [[1]][[1]]										)#
startfulldat2$plate <- platepixS#
startdatU <- MapToWellsBZ(startfulldat2,startmap,firstcol=5,sumcols = c(4,6),meancols =c(5,7,9:11,15:17) )#
startdatc <- startdatU[order( as.numeric(startdatU$plate), startdatU$row, startdatU$column  ),]#
#
#### convert to square mm of tissue at same time#
#experiment was set up in 2 times steps, plates 1-20; then 21-50#
standarddim <- read.csv("wellsizeBZS2photos.csv")#
#conversion factors by day#
pxpmm <- standarddim$pixlength / standarddim$mm.length #standard width between centers of wells, and measures in representative images#
dayofphoto <- c(rep(1,times=960),rep(2,times=1440))#
startdat <- startdatc; day5dat <- day5datc; day7dat<-day7datc; enddat <-enddatc#
startdat$area <- startdatc$area/(pxpmm[dayofphoto])^2 #
day5dat$area <- day5datc$area/(pxpmm[dayofphoto+2])^2 #
day7dat$area <- day7datc$area/(pxpmm[dayofphoto+4])^2 #
enddat$area <-  enddatc$area/(pxpmm[dayofphoto+6])^2   #
arabicpairod <- ifelse(od_datRaw$pair=="I",1,2)#
arabicppod <- as.numeric (paste(od_datRaw$plate,arabicpairod,sep="."))#
# same_sampleid <- paste(arabicplateod,paste(od_datRaw$row,od_datRaw$col,sep=""),sep=".")#
arabicplatefr <- sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][1])#
pairfr <-  sapply(1:nrow(frondsRaw), function(z) strsplit(frondsRaw$plate[z],"[.]")[[1]][2])#
arabicpairfr <-  ifelse(pairfr=="I",1,2)#
arabicppfr <- paste(arabicplatefr,arabicpairfr,sep=".")#
#
#checks that data align as hoped across datasets#
sum(arabicppfr == arabicppod)#
sum(arabicppfr == enddat$plate)#
sum(arabicppfr == startdat$plate)#
sum(frondsRaw$column == od_datRaw$col)#
sum(frondsRaw$column == enddat$column)#
sum(frondsRaw$row == od_datRaw$row)#
sum(frondsRaw$row == enddat$row)#
frondsRaw$arabicpp <- arabicppfr#
od_datRaw$arabicpp <- arabicppod#
#
#remove error rows#
fronds <- frondsRaw[frondsRaw$unfixed.error != "ERROR",]#
od_dat <- od_datRaw[frondsRaw$unfixed.error != "ERROR",]#
endsqm <- enddat[frondsRaw$unfixed.error != "ERROR",]#
startpix <- startdat[frondsRaw$unfixed.error != "ERROR",]#
midsqm <- day5dat[frondsRaw$unfixed.error != "ERROR",]#
midsqm2 <- day7dat[frondsRaw$unfixed.error != "ERROR",]#
#
##
colnames(startpix) <- paste("start",colnames(startdat),sep="_")#
colnames(midsqm) <- paste("mid",colnames(midsqm),sep="_")#
colnames(midsqm2) <- paste("mid2",colnames(midsqm2),sep="_")#
#
#fix issue with fronds file:#
#the experiment prep notes in photographs show col6 of platepair 23 should be MNT, col4 of plaitepaire 23 should be SHB#
#in the frond data this is swapped (an error was made in swapping labels, there had been 2 cols of SHB in original design, one column was swapped to MNT but the wrong column was changed in the file)#
fronds$genotype[od_dat$plate==23 & fronds$col==6] <- "Mnt"#
fronds$genotype[od_dat$plate==23 & fronds$col==4] <- "SHB"#
#
biodat <- data.frame(cbind(fronds[1:14],od_dat$od600,od_dat$od750,endsqm[,c(2,6:16)],startpix[,c(1,5:15)], midsqm[,c(1,5:15)],  midsqm2[,c(1,5:15)]))#
biodat$microbeyn <- ifelse(biodat$microbe=="+","Y","N")#
biodatlocs <- sapply(biodat$genotype, function(x) bzsinfo$km.cityC[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$loc <- biodatlocs#
biodat$rddns <- sapply(biodat$genotype, function(x) bzsinfo$roaddens[which(as.character(bzsinfo$bzs2)==as.character(x))])#
biodat$deltasqmm <- biodat$area - biodat$start_area #note these are all in units of square millimeters of area. but were measured from pixels#
biodat$dsqmmid <- biodat$mid_area - biodat$start_area#
biodat$dsqm511 <- biodat$area - biodat$mid_area#
biodat$dsqmmid2 <- biodat$mid2_area - biodat$start_area#
biodat$dsqm711 <- biodat$area - biodat$mid2_area#
write.csv(biodat,"biodat.csv",row.names=F)
dsqmRbest <- MCMCglmm(deltasqmm~rddns +  microbe + BZT + Salt + BZT:Salt + microbe:Salt, #
						data=biodat,verbose=F, nitt=100000,thin=10,burnin=10000,pr=T)#
summary(dsqmRbest)#
rd.s <- seq(from=min(biodat$rddns),to=max(biodat$rddns),length.out=1000)#
dpxsolrd <- dsqmRbest$Sol#
dpxng.mnrd <- sapply(1:length(rd.s), function(z) mean(dpxsolrd[,1]+ dpxsolrd[,2]*rd.s[z] + dpxsolrd[,3]*0.5 + dpxsolrd[,4]*0.5+ dpxsolrd[,5]*0.5 + dpxsolrd[,6]*0.5 + dpxsolrd[,7]*0.5) )#
dpxng.hpdird <- sapply(1:length(rd.s), function(z) HPDi(dpxsolrd[,1]+ dpxsolrd[,2]*rd.s[z] + dpxsolrd[,3]*0.5 + dpxsolrd[,4]*0.5+ dpxsolrd[,5]*0.5 + dpxsolrd[,6]*0.5 + dpxsolrd[,7]*0.5, 0.95) )#
dsqmrdmn <- tapply(biodat$deltasqmm,biodat$rddns,mean)#
rdrd <- tapply(biodat$rddns,biodat$rddns,mean)#
dsqm.mns <- tapply(biodat$deltasqmm, paste(biodat$microbe,biodat$Salt,biodat$BZT),mean)#
dsqm.ses <- tapply(biodat$deltasqmm, paste(biodat$microbe,biodat$Salt,biodat$BZT),std.error)#
#OPTICAL DENSITY#
#testing normality assumption, and taking log to address issue#
shapiro.test((biodat$od_dat.od600))#
shapiro.test((biodat$od_dat.od750))#
shapiro.test(log(biodat$od_dat.od600+min(biodat$od_dat.od600[biodat$od_dat.od600>0],na.rm=T)))#
shapiro.test(log(biodat$od_dat.od750+min(biodat$od_dat.od750[biodat$od_dat.od750>0],na.rm=T)))#
biodat$lnod600 <- log(biodat$od_dat.od600+ min(biodat$od_dat.od600[biodat$od_dat.od600>0],na.rm=T ) )#
biodat$lnod750 <- log(biodat$od_dat.od750+ min(biodat$od_dat.od750[biodat$od_dat.od750>0],na.rm=T ) )#
#
bioMdat <- biodat[biodat$microbe=="+",]#
#
inocModng <- MCMCglmm(lnod600 ~microbe,data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)#
summary(inocModng) #
#therefore + and - are more "disrupted" and "local"#
inocmns <- tapply(biodat$lnod600,biodat$microbe,mean,na.rm=T)#
inocses <- tapply(biodat$lnod600,biodat$microbe,std.error,na.rm=T)
dsqmRbest <- MCMCglmm(deltasqmm~rddns +  microbe + BZT + Salt + BZT:Salt + microbe:Salt, #
						data=biodat,verbose=F, nitt=200000,thin=10,burnin=10000,pr=T)
summary(dsqmRbest)
par(mar=c(4,4,1,1))#
plot(inocmns~c(1,2),xlim=c(0.5,2.5),xaxt="n",ylim=bufferX(c(inocmns+inocses,inocmns-inocses),0.1) ,cex=2,#
	ylab="",xlab=""	)#
	arrows(1:2,inocmns-inocses,y1=inocmns+inocses,length=0,lwd=2)#
	axis(side=1,at=c(1,2),labels=c("disrupted","local"))#
	mtext("microbe treatment",side=1,line=2.2)#
	mtext("microbe growth ln(OD)",side=2,line=2.5)
mbod600ngrdr6 <- MCMCglmm(lnod600 ~rddns    , data=bioMdat,verbose=F, nitt=100000,thin=10,burnin=10000)#
summary(mbod600ngrdr6)#
odngRd.mns <- sapply(rd.s,function(z)	mean(mbod600ngrdr6$Sol[,1] + mbod600ngrdr6$Sol[,2]*z))#
odngRd.hpdis <- sapply(rd.s,function(z)	HPDi(mbod600ngrdr6$Sol[,1] + mbod600ngrdr6$Sol[,2]*z,0.95))#
odrdmns <- tapply(bioMdat$lnod600,bioMdat$rddns,mean)
par(mfrow=c(1,3))#
par(mar=c(3.5,4,1.5,0))#
par(oma=c(0,0,0,0))#
plot(dsqm.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.8,3.5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), pch=c(0:2,6),#
		ylim=c(10,21))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dsqm.mns-dsqm.ses,y1=dsqm.mns+dsqm.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	arrows(c(2,2.1,2.2,2.3), dsqm.mns[1:4], x1=c(3,3.1,3.2,3.3),dsqm.mns[5:8], length=0, lwd=2,#
		col = c(rgb(0,0,0,alpha=0.5),rgb(0,0,0.75,alpha=0.5),rgb(0.75,0,0,alpha=0.5),rgb(0.75,0,0.75,alpha=0.5)),lty=2)#
	axis(side=1, at=c(2.15,3.15),labels=c("disrupted","local"),cex.axis=1.25)#
	mtext("microbes",side=1,line=2.2)#
	mtext(bquote("plant growth, mm"^2),side=2,line=2)#
	legend(1.7,22,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n", pch=c(0:2,6),#
		 col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),cex=1.25)#
	mtext("a.",side=3,adj=-0.25,line=0.3)#
plot(dsqmrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-3,40))#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s,lwd=2)	#
	points(dsqmrdmn~rdrd,pch=16,cex=1.5)#
	mtext(bquote("plant growth, mm"^2),side=2,line=2)#
	mtext("road density",side=1,line=2.2) #length per area. - km / km^2#
	mtext("b.",side=3,adj=-0.25,line=0.3)#
plot(odrdmns~rdrd,pch=16,cex=1.5,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("microbe growth, ln(OD)",side=2,line=2.5)##
	mtext("road density",side=1,line=2.2)#
	mtext("c.",side=3,adj=-0.25,line=0.3)
mbod600fdr10 <- MCMCglmm(lnod600 ~rddns +  microbe + Salt + rddns:microbe + microbe:Salt, data=biodat,verbose=F, nitt=100000,thin=10,burnin=10000)#
summary(mbod600fdr10)#
#
###FROND GROWTH#
frondsbytime <- data.frame(fronds = c(biodat$X0.FN,biodat$X2.FN,biodat$X4.FN,biodat$X6.FN,biodat$X8.FN,biodat$X10.FN),#
							id = as.character(rep(1:nrow(biodat),times=6)), days= rep(c(0,3,5,7,9,11),each=nrow(biodat)),#
							BZT = rep(ifelse(biodat$BZT=="B",1,0),times=6), Salt = rep(ifelse(biodat$Salt=="S",1,0), times=6), #
							microbe = rep(ifelse(biodat$microbe=="+",1,0),times=6), loc = rep(biodat$loc,times=6),#
							rddns = rep(biodat$rddns,times=6), genotype = rep(biodat$genotype,times=6) )
mbgrTIMEidintONLYRDr2 <- MCMCglmm(fronds~ days + days:rddns +  days:microbe + days:BZT + days:Salt +#
					 days:rddns:microbe + days:rddns:BZT + days:rddns:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:rddns:BZT:Salt + days:rddns:microbe:Salt + days:microbe:Salt:BZT , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
#stop			#
FgrowSolNGRd <- mbgrTIMEidintONLYRDr2$Sol#
forfrondtimeNGRd <- function(b, S, m) {#
				mnslp <- sapply(rd.s , function(z) mean(FgrowSolNGRd[,2] +  FgrowSolNGRd[,3]*z +  FgrowSolNGRd[,4]*m +  FgrowSolNGRd[,5]*b + FgrowSolNGRd[,6]*S +#
													    FgrowSolNGRd[,7]*z*m +  FgrowSolNGRd[,8]*z*b +  FgrowSolNGRd[,9]*z*S +  FgrowSolNGRd[,10]*b*m +#
													   FgrowSolNGRd[,11]*b*S +  FgrowSolNGRd[,12]*m*S +  FgrowSolNGRd[,13]*z*b*S + FgrowSolNGRd[,14]*z*m*S +  FgrowSolNGRd[,15]*m*b*S) )#
				hpdislp <- sapply(rd.s , function(z) HPDi(FgrowSolNGRd[,2] +  FgrowSolNGRd[,3]*z +  FgrowSolNGRd[,4]*m +  FgrowSolNGRd[,5]*b + FgrowSolNGRd[,6]*S +#
													    FgrowSolNGRd[,7]*z*m +  FgrowSolNGRd[,8]*z*b +  FgrowSolNGRd[,9]*z*S +  FgrowSolNGRd[,10]*b*m +#
													   FgrowSolNGRd[,11]*b*S +  FgrowSolNGRd[,12]*m*S +  FgrowSolNGRd[,13]*z*b*S + FgrowSolNGRd[,14]*z*m*S +  FgrowSolNGRd[,15]*m*b*S, 0.95) )#
													   return(list(mnslp,hpdislp))#
}#
slopengr.mnBSM	<- forfrondtimeNGRd(1,1,1)											   #
slopengr.mnBSx	<- forfrondtimeNGRd(1,1,0)											   #
slopengr.mnBxM	<- forfrondtimeNGRd(1,0,1)											   #
slopengr.mnBxx	<- forfrondtimeNGRd(1,0,0)											   #
slopengr.mnxSM	<- forfrondtimeNGRd(0,1,1)											   #
slopengr.mnxSx	<- forfrondtimeNGRd(0,1,0)											   #
slopengr.mnxxM	<- forfrondtimeNGRd(0,0,1)											   #
slopengr.mnxxx	<- forfrondtimeNGRd(0,0,0)											   #
slopes <- sapply(1:nrow(biodat), function(z) lm(unlist(biodat[z,9:14])~as.vector(c(0,2,4,6,8,10)))$coef[2] )#
genoslptrt <- t(sapply(1:length(unique(biodat$genotype)), function(geno) tapply(#
		slopes[ biodat$genotype == sort(unique(biodat$genotype))[geno] ],paste( biodat$BZT,biodat$Salt,biodat$microbe )[biodat$genotype == sort(unique(biodat$genotype))[geno] ],mean )#
	))
summary(mbgrTIMEidintONLYRDr2)
par(mfrow=c(2,2))#
par(mar=c(2,2,0,1))#
par(oma=c(3,3,2.5,1))#
plot(genoslptrt[,1]~bzsinfo$roaddens,pch=1,ylab="Growth rate",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxxx[[2]][1,],rev(slopengr.mnxxx[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxSx[[2]][1,],rev(slopengr.mnxSx[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,3]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnxxx[[1]]~rd.s)#
 lines(slopengr.mnxSx[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("Fronds/day",side=2,line=3,adj=-1.5)#
 mtext("0 mg/L BZT",side=2,line=2)#
 mtext("disrupted",side=3,line=1.5)#
 mtext("microbes",side=3,line=0.5)#
plot(genoslptrt[,2]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxxM[[2]][1,],rev(slopengr.mnxxM[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxSM[[2]][1,],rev(slopengr.mnxSM[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,4]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnxxM[[1]]~rd.s)#
 lines(slopengr.mnxSM[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("local",side=3,line=1.5)#
 mtext("microbes",side=3,line=0.5)#
plot(genoslptrt[,5]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="Growth rate",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBxx[[2]][1,],rev(slopengr.mnBxx[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBSx[[2]][1,],rev(slopengr.mnBSx[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,7]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 mtext("1 mg/L BZT",side=2,line=2)#
 lines(slopengr.mnBxx[[1]]~rd.s,col=rgb(0,0,0))#
 lines(slopengr.mnBSx[[1]]~rd.s,col=rgb(1,0,0))#
plot(genoslptrt[,6]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBxM[[2]][1,],rev(slopengr.mnBxM[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBSM[[2]][1,],rev(slopengr.mnBSM[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,8]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnBxM[[1]]~rd.s,col=rgb(0,0,0))#
 lines(slopengr.mnBSM[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("road density",side=1,line=2,adj=-3)#
 legend(0,1.35,c("0 g/L NaCl","0.8 g/L NaCl"),fill=c(rgb(0,0,0),rgb(1,0,0) ),bty="n")
par(mfrow=c(2,2))#
par(mar=c(2,2,0,1))#
par(oma=c(3,3,2.5,1))#
plot(genoslptrt[,1]~bzsinfo$roaddens,pch=1,ylab="Growth rate",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxxx[[2]][1,],rev(slopengr.mnxxx[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxSx[[2]][1,],rev(slopengr.mnxSx[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,3]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnxxx[[1]]~rd.s)#
 lines(slopengr.mnxSx[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("Fronds/day",side=2,line=3,adj=-1.5)#
 mtext("0 mg/L BZT",side=2,line=2)#
 mtext("disrupted",side=3,line=1.5)#
 mtext("microbes",side=3,line=0.5)#
plot(genoslptrt[,2]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxxM[[2]][1,],rev(slopengr.mnxxM[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnxSM[[2]][1,],rev(slopengr.mnxSM[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,4]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnxxM[[1]]~rd.s)#
 lines(slopengr.mnxSM[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("local",side=3,line=1.5)#
 mtext("microbes",side=3,line=0.5)#
plot(genoslptrt[,5]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="Growth rate",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBxx[[2]][1,],rev(slopengr.mnBxx[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBSx[[2]][1,],rev(slopengr.mnBSx[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,7]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 mtext("1 mg/L BZT",side=2,line=2)#
 lines(slopengr.mnBxx[[1]]~rd.s,col=rgb(0,0,0))#
 lines(slopengr.mnBSx[[1]]~rd.s,col=rgb(1,0,0))#
plot(genoslptrt[,6]~bzsinfo$roaddens,pch=1,col=rgb(0,0,0),ylab="",xlab="",ylim=c(-0.25,1.2))#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBxM[[2]][1,],rev(slopengr.mnBxM[[2]][2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	polygon(c(rd.s,rev(rd.s)), y=c(slopengr.mnBSM[[2]][1,],rev(slopengr.mnBSM[[2]][2,])), col=rgb(1,0,0,alpha=0.5), border=NA)#
	points(genoslptrt[,8]~bzsinfo$roaddens,pch=1,col=rgb(1,0,0))#
 lines(slopengr.mnBxM[[1]]~rd.s,col=rgb(0,0,0))#
 lines(slopengr.mnBSM[[1]]~rd.s,col=rgb(1,0,0))#
 mtext("road density",side=1,line=2,adj=-3)#
 legend(0,1.35,c("0 g/L NaCl","0.8 g/L NaCl"),fill=c(rgb(0,0,0),rgb(1,0,0) ),bty="n")
slopeng.mns <- tapply(slopes,paste( biodat$BZT,biodat$Salt,biodat$microbe ),mean)#
slopeng.ses <- tapply(slopes,paste( biodat$BZT,biodat$Salt,biodat$microbe ),std.error)
par(mar=c(4,4,1,1))#
plot(slopeng.mns ~ c(1,2,1,2,1,2,1,2), col = rgb( c(0,0,1,1,0,0,1,1) ,0, c(0,0,0,0,1,1,1,1) ), #
	xlim=c(0.5,4.5),xaxt="n",xlab="",ylab="", cex=2,ylim=c(0.18,0.28) )#
 mtext("Fronds/day",side=2,line=2.5)#
	axis(side=1, at=c(1,2),labels=c("disrupted","local"))#
	arrows( c(1,2,1,2,1,2,1,2),slopeng.mns-slopeng.ses, y1= slopeng.mns + slopeng.ses,length=0,#
	 col = rgb( c(0,0,1,1,0,0,1,1) ,0, c(0,0,0,0,1,1,1,1) ) )#
	arrows( c(1,1,1,1), slopeng.mns[c(1,3,5,7)], x1=c(2,2,2,2), y1= slopeng.mns[c(2,4,6,8)],length=0,#
	 col = rgb( c(0,1,0,1) ,0, c(0,0,1,1),alpha=0.5 ),lwd=2,lty=2 )#
	legend(2.25,0.28,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))
rm(list=ls())
library(qiime2R)#
library(SDMTools) #this is just for legend.gradient used in family abundance figure; may be difficult to install, if so simply comment out the library and legend.gradient()#
# install.packages("remotes")#
# remotes::install_version("SDMTools", "1.1-221")#
library(MCMCglmm)#
library(phangorn)#descendants #
library(ggtree)#
library(ggnewscale) #for ggtree
remotes::install_version("SDMTools", "1.1-221")
library(SDMTools) #this is just for legend.gradient used in family abundance figure; may be difficult to install, if so simply comment out the library and legend.gradient()
range01 <- function(x) {#
	newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
	return(newnums)#
} #
#
HPDi <- function(vect,prob) {#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
} #shortcut for coda HPDinterval #
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#################################################
####READ IN MICROBIOME DATA, BIOOLOGICAL DATA, COLLECTION INFO, PROCESS
getwd()
feat.tab.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_sepp_keptfeatures_table.qza")#filtered taxa in the phylogeny (not sure how much this last filter tosses)
feat.rmtab.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_sepp_rmdfeatures_table.qza")##
feat.tax.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_taxonomy.qza")##NOT FILTERED TO kept features, or even to rm streptophyta (chloroplast, which are removed from the dataset, along with mitochondrial sequences)#
bal.phy.qz	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_balances_tree.qza")$data#
hier.phy 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_hierarchy_tree.qza")$data #
bal.phy 	<- bal.phy.qz[,order(colnames(bal.phy.qz))] #
feat.tab 	<- feat.tab.qz$data[,order(colnames(feat.tab.qz$data))] #
feat.rmtab 	<- feat.rmtab.qz$data[,order(colnames(feat.rmtab.qz$data))] #
dim(feat.rmtab) # empty. no taxa had to be removed when making phylogeny#
feat.tax 	<- feat.tax.qz$data
nrow(feat.rmtab) #no reads or ASVs removed during placement into tree#
mean(colSums((feat.tab))) #[1] 30632.06#
range(colSums((feat.tab))) #[1] 19544 47017#
sum(colSums((feat.tab))) #520745#
range(colSums(sign(feat.tab)))# 13 44#
mean(colSums(sign(feat.tab))) # 25.23529#
range(rowSums(sign(feat.tab)))#
table(rowSums(sign(feat.tab)))#
feat.tax[feat.tax$Feature.ID%in%names(which(rowSums(sign(feat.tab))>=5)),]
div.shannon.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_coremetrics/shannon_vector.qza")$data #
transfdivS <- div.shannon.qz[order(rownames(div.shannon.qz)),]#
div.feats.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_coremetrics/observed_features_vector.qza")$data #
transfdivF <- div.feats.qz[order(rownames(div.feats.qz)),]#
div.faith.qz 	<- read_qza("../qiime2BZT17_sequencefiles_and_analysis/outputs/Lmb_BZ17_coremetrics/faith_pd_vector.qza")$data #
transfdivPD <- div.faith.qz[order(rownames(div.faith.qz)),]#
#reordering results:#
rownames(div.shannon.qz)[order(rownames(div.shannon.qz))] == colnames(feat.tab)#
colnames(bal.phy) == colnames(feat.tab)
feat.prop <- feat.tab#
ftsums <- colSums(feat.tab)#
for(i in 1:ncol(feat.tab)){feat.prop[,i] <- feat.prop[,i]/ftsums[i]}#
#split tax info into columns#
taxlevs <- sapply(1:nrow(feat.tax), function(z) strsplit(as.character(feat.tax$Taxon[z]),split="; "))#
tax <- matrix(NA,ncol=7,nrow=nrow(feat.tax))#
for(i in 1:nrow(tax)){ tax[i,1:length(taxlevs[[i]])]<- taxlevs[[i]]}#
rownames(tax) <- as.character(feat.tax$Feature.ID)#
mastertab.s <- feat.prop#
mastertax.s <- tax[rownames(mastertab.s),]#
#
divdf <- data.frame(community = colnames(mastertab.s),richness=transfdivF,shannon = transfdivS,faithphylodiv=transfdivPD)#
#
##read sample info, and sort accordingly#
sampleinfo 		<- read.csv("~/Dropbox/salt BT round 2/Lemna_microbiome_barebones_meta_inbzt2_wkmcC_only.tsv",sep="\t",header=T, stringsAsFactors=F) #
newcolnamesM <- sapply(colnames(mastertab.s), function(x) sampleinfo$bzs2[sampleinfo$sample.id==x])#
colnames(mastertab.s)<- newcolnamesM#
colnames(bal.phy) <- newcolnamesM#
famsr <- unique(mastertax.s[,5])#
fams <- famsr[-c(which(famsr=="f__"),which(is.na(famsr)))]#
famdf <- matrix(NA,ncol=length(fams)+1,nrow=17 )#
for(i in 1:length(fams)){#
	if(length(which(mastertax.s[,5]==fams[i]))>1) {#
	famdf[,i] <- colSums(mastertab.s[which(mastertax.s[,5]==fams[i]),])#
	} else { famdf[,i] <- mastertab.s[which(mastertax.s[,5]==fams[i]),] }#
}#
famdf[,length(fams)+1] <- colSums(mastertab.s[which(mastertax.s[,5]=="f__" | is.na(mastertax.s[,5]) ),])#
colnames(famdf) <- c(fams,"Unknown")#
rownames(famdf) <- colnames(mastertab.s)#
famsim <- famdf[,names(sort(colSums(famdf),decreasing=T))[1:10]]#
famsim <-cbind(famsim, rowSums(famdf[,names(sort(colSums(famdf),decreasing=T))[11:(length(fams))]]))#
#op ten family names#
names(sort(colSums(famdf),decreasing=T))[1:10]#
#write out names#
famnames <- c( "Pseudomonadaceae" , "Aeromonadaceae" ,"Enterobacteriaceae" , "Rhizobiaceae"  ,#
				 "Xanthomonadaceae"  ,  "Sphingobacteriaceae",  "Bacillaceae"  , #
				 "Comamonadaceae"  , "Moraxellaceae",  "Chromatiaceae",#
				   "Other"   )          #
wb <- colorRampPalette(c(rgb(1,1,1),rgb(0,0,0)))
sampleinfo 		<- read.csv("Lemna_microbiome_barebones_meta_inbzt2_wkmcC_only.tsv",sep="\t",header=T, stringsAsFactors=F) #
newcolnamesM <- sapply(colnames(mastertab.s), function(x) sampleinfo$bzs2[sampleinfo$sample.id==x])#
colnames(mastertab.s)<- newcolnamesM#
colnames(bal.phy) <- newcolnamesM#
famsr <- unique(mastertax.s[,5])#
fams <- famsr[-c(which(famsr=="f__"),which(is.na(famsr)))]#
famdf <- matrix(NA,ncol=length(fams)+1,nrow=17 )#
for(i in 1:length(fams)){#
	if(length(which(mastertax.s[,5]==fams[i]))>1) {#
	famdf[,i] <- colSums(mastertab.s[which(mastertax.s[,5]==fams[i]),])#
	} else { famdf[,i] <- mastertab.s[which(mastertax.s[,5]==fams[i]),] }#
}#
famdf[,length(fams)+1] <- colSums(mastertab.s[which(mastertax.s[,5]=="f__" | is.na(mastertax.s[,5]) ),])#
colnames(famdf) <- c(fams,"Unknown")#
rownames(famdf) <- colnames(mastertab.s)#
famsim <- famdf[,names(sort(colSums(famdf),decreasing=T))[1:10]]#
famsim <-cbind(famsim, rowSums(famdf[,names(sort(colSums(famdf),decreasing=T))[11:(length(fams))]]))#
#op ten family names#
names(sort(colSums(famdf),decreasing=T))[1:10]#
#write out names#
famnames <- c( "Pseudomonadaceae" , "Aeromonadaceae" ,"Enterobacteriaceae" , "Rhizobiaceae"  ,#
				 "Xanthomonadaceae"  ,  "Sphingobacteriaceae",  "Bacillaceae"  , #
				 "Comamonadaceae"  , "Moraxellaceae",  "Chromatiaceae",#
				   "Other"   )          #
wb <- colorRampPalette(c(rgb(1,1,1),rgb(0,0,0)))
layout(matrix(1:2,ncol=2),widths=c(1.5,0.5))#
par(mar=c(4,11,1,1))#
image(famsim,col=wb(50),xaxt="n",yaxt="n",ylab="",xlab="",zlim=c(0,1))#
	axis(side = 1,at = seq(from=0,to=1,length.out=17), labels=rownames(famdf),las=2)#
	axis(side=2, at=seq(from=0,to=1,length.out=11), labels=famnames,las=2)#
par(mar=c(1,2,1,1))#
plot(c(1,10)~c(0,15), xaxt="n", yaxt="n",bty="n",pch=NA,ylab="",xlab="")#
	legend.gradient(cbind(c(1,1.75,1.75,1),c(2,2,9,9)),cols=wb(15),title="",limits=c("0%","100%"),cex=1.2)#
	mtext("Relative abundance",side=2) #srt=270
#biological measurements#
biodat <- read.csv("biodat.csv",header=T) # deltasqmm is change in sq mm of duckweed as measured by pixel area in images#
biodat$lnOD600 <- log(biodat$od_dat.od600+ min(biodat$od_dat.od600[biodat$od_dat.od600>0],na.rm=T) )#
#
#bzt transf data#
transf <- read.csv("BZS2_transformation.csv",stringsAsFactors=F,header=T)#
1-range(transf$conc_corrected) #report range#
transf$Genotype[transf$Genotype=="Cnp"] <- "CnP" #to match other files#
table(transf$Genotype)#
#
#molar mass benzotriazole: 119.12#
#molar masses: bzta, glybzt, bztaa, anilin, a3p, phen, mbzt, moxybz#
molmassTPs <- c(207,282,249 ,94,110,181, 134,150) #daltons #
mgperL <- sapply(1:8, function(z) molmassTPs[z]*transf[,z+15]*(1000/2.5))  #molarmass * mols per 2.5 mL * 1000/2.5 = grams /L#
#ecosar units: mg/L bzt is 40.7#
fishLC50 <- c(3.66e6,4.21e4,1.61e5,40.3,11.4,80.9,652,45.6)#mg/L#
toxunits <- rowSums(sapply(1:8, function(z) mgperL[,z]/fishLC50[z]))#
toxuBZT <- toxunits + 40.7*transf$conc_corrected #proportion remaining * 1, starting value was 1 mg/L#
cor(transf$conc_corrected,toxuBZT)#rho is 1#
#
#create identifiers to merge bio/transformation/microbiome information#
arabicplate <- as.numeric(sapply(1:nrow(biodat), function(z) strsplit(biodat$plate[z],"[.]")[[1]][1]))#
splitpair <- sapply(1:nrow(biodat), function(z) strsplit(biodat$plate[z],"[.]")[[1]][2]) #
arabicpair <- ifelse(splitpair=="I",1,2)#
same_sampleid <- paste(arabicplate,arabicpair,paste(biodat$row,biodat$column,sep=""),sep=".")#
# subset#
subbio <- biodat[biodat$genotype%in%transf$Genotype,]#
subbioexact <- t(sapply(1:length(transf$id), function(id) biodat[which(same_sampleid == transf$id[id]),]))#
#sorted idenically to transf object#
subbioexactdf <- data.frame(matrix(ncol=ncol(biodat),nrow=nrow(transf)))#
for(i in 1:ncol(biodat)){#
	subbioexactdf[,i] <- unlist(subbioexact[,i])#
}#
colnames(subbioexactdf) <- colnames(biodat)#
#
#### Subset, sort, merge.#
#now subset inocula abundance data to only the genotypes for which there are transformation products#
submastertab <- mastertab.s[,colnames(mastertab.s)%in%transf$Genotype]#
	submastertab.s <- submastertab[-(which(rowSums(submastertab) ==0)),]#
	submastertax <- mastertax.s[rownames(submastertab.s),]#
subbalphy <- bal.phy[,colnames(bal.phy)%in%transf$Genotype]#
#get transformation products matrix by genotype, transform via log when appropriate#
products <- transf[,c(11,16:23)]#
productsAA <- cbind(transf[,c(11,17)], rowSums(transf[,c(16,18)]), transf[,19:23])#
productsAAnm <- productsAA#
productsAAnm[,2:8] <- (productsAA[,2:8]/2.5)*10e09*1000 # from moles per well to nanomoles per liter#
productsAAnm[,1] <- 100*(1-productsAA[,1])#
colnames(productsAAnm) <- c( colnames(transf)[c(11,17)],"BZTa+BZTaa" , colnames(transf)[19:23] )#
logprodsAA <- sapply(1:ncol(productsAAnm), function(x) log(productsAAnm[,x] + min(productsAAnm[productsAA[,x]>0,x])))#
colnames(logprodsAA) <- colnames(productsAAnm)#
chooselogprodsAA <- sapply(1:ncol(productsAAnm), function(z) shapiro.test(productsAAnm[,z])$statistic < 0.7 & shapiro.test(logprodsAA[,z])$statistic > shapiro.test(productsAAnm[,z])$statistic )#
mixAA <- productsAAnm#
mixAA[,which(chooselogprodsAA)] <- logprodsAA[,chooselogprodsAA]#
mixAAtrt <- cbind(Genotype=transf$Genotype, Salt=transf$Salt, Microbes = transf$Microbes, rddens =transf$density/1000, km= transf$km, mixAA)#
colnames(mixAAtrt)[colnames(mixAAtrt)=="BZTa+BZTaa"] <- "BZTaplusBZTaa"#
mixAAtrt$OD600 <- subbioexactdf$od_dat.od600#
mixAAtrt$lnOD600 <- subbioexactdf$lnOD600#
mixAAtrt$deltasqmm <- subbioexactdf$deltasqmm#
shapiro.test(toxunits); shapiro.test(log(toxunits))#
mixAAtrt$logtoxu <- log(toxunits)#
mixAAtrtbio <- mixAAtrt[!is.na(mixAAtrt$OD600),]#
mixAAtrt$micrnum <- as.numeric(as.factor(mixAAtrt$Microbes))-1 #
#genotyp biomeans by trts#
biogenotrt <- sapply(sort(unique(biodat$genotype)), function(g) sapply(c(9:16,18:28,68), function(p) tapply(biodat[biodat$genotype==g,p],paste(biodat$BZT,biodat$Salt,biodat$microbe)[biodat$genotype==g],mean,na.rm=T) )) #
#trtmnt order is all 0 bzt before all + bzt; then all 0 s before + s, then all - before +, so 0 0 -; 0 0 +, 0S - ....#
#traits are grouped in rows first 8 rows are x0.FN, order is x0.FN through x10.FN, od600 od750, then all imageJ columns (area, perim, mean...) #
#################################################
###models of product responses to treatments, correlation with biological growth#
#################################################
#
rddens.s <- seq(from=min(mixAAtrt$rddens),to=max(mixAAtrt$rddens),length.out=1000)#
dsqm.s <- seq(from=min(mixAAtrtbio$deltasqmm),to=max(mixAAtrtbio$deltasqmm),length.out=1000)#
od.s <- seq(from=min(mixAAtrtbio$lnOD600),to=max(mixAAtrtbio$lnOD600),length.out=1000)
BZTremtrt <- MCMCglmm(conc_corrected~ Salt +rddens   ,data=mixAAtrt,nitt=100000,verbose=F) #salt neg and rddens pos#
solbrt <- BZTremtrt$Sol#
predBRTm <- sapply(rddens.s, function(z) mean(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z) )#
predBRTi <- sapply(rddens.s, function(z) HPDi(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z, 0.95) )
BZTdp <- (MCMCglmm(conc_corrected~deltasqmm ,data=mixAAtrtbio,nitt=100000,verbose=F))#pos#
solbpx <- BZTdp$Sol#
predBpxm <- sapply(dsqm.s, function(z) mean(solbpx[,1] + solbpx[,2]*z) )#
predBpxi <- sapply(dsqm.s, function(z) HPDi(solbpx[,1] + solbpx[,2]*z, 0.95))
BZTaatrt <- (MCMCglmm(BZTaplusBZTaa~ rddens  ,data=mixAAtrt,nitt=100000,verbose=F)) #rddens pos#
solbaat <- BZTaatrt$Sol#
predBATm <- sapply(rddens.s, function(z) mean(solbaat[,1] + solbaat[,2]*z) )#
predBATi <- sapply(rddens.s, function(z) HPDi(solbaat[,1] + solbaat[,2]*z, 0.95) )
baaod <-(MCMCglmm(BZTaplusBZTaa~ lnOD600 ,data=mixAAtrtbio,nitt=100000,verbose=F)) #pos#
solbaaod <- baaod$Sol#
predBaom <- sapply(od.s, function(z) mean(solbaaod[,1] + solbaaod[,2]*z) )#
predBaoi <- sapply(od.s, function(z) HPDi(solbaaod[,1] + solbaaod[,2]*z, 0.95))
glypo <- (MCMCglmm(scale(glycosylatedBZT)~deltasqmm + lnOD600,data=mixAAtrtbio,nitt=100000,verbose=F))#pos#
solgpo <- glypo$Sol#
predGpxm <- sapply(dsqm.s, function(z) mean(solgpo[,1] + solgpo[,2]*z + solgpo[,3]*mean(mixAAtrtbio$lnOD600)) )*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGpxi <- sapply(dsqm.s, function(z) HPDi(solgpo[,1] + solgpo[,2]*z + solgpo[,3]*mean(mixAAtrtbio$lnOD600), 0.95))*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGodm <- sapply(od.s, function(z) mean(solgpo[,1] + solgpo[,2]*mean(mixAAtrtbio$deltasqmm) + solgpo[,3]*z) )*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGodi <- sapply(od.s, function(z) HPDi(solgpo[,1] + solgpo[,2]* mean(mixAAtrtbio$deltasqmm)+ solgpo[,3]*z, 0.95))*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)
mbod <-(MCMCglmm(scale(methylBZT)~ lnOD600 ,data=mixAAtrtbio,nitt=100000,verbose=F)) #pos#
solmbod <- mbod$Sol#
predMBom <- sapply(od.s, function(z) mean(solmbod[,1] + solmbod[,2]*z) )*sd(mixAAtrtbio$methylBZT) + mean(mixAAtrtbio$methylBZT)#
predMBoi <- sapply(od.s, function(z) HPDi(solmbod[,1] + solmbod[,2]*z, 0.95))*sd(mixAAtrtbio$methylBZT) + mean(mixAAtrtbio$methylBZT)
moxBtrt <- (MCMCglmm(methoxyBZT~ Salt +rddens  ,data=mixAAtrt,nitt=100000,verbose=F))# salt neg and rddens neg #
solmBt <- moxBtrt$Sol#
predMBTm <- sapply(rddens.s, function(z) mean(solmBt[,1] + solmBt[,2]*0.5 + solmBt[,3]*z) ) #
predMBTi <- sapply(rddens.s, function(z) HPDi(solmBt[,1] + solmBt[,2]*0.5 + solmBt[,3]*z, 0.95) )
a3ptrt <- (MCMCglmm(amino_3_phenol~  Salt +rddens  ,data=mixAAtrt,nitt=100000,verbose=F)) #salt neg and rddens neg#
sola3pt <- a3ptrt$Sol#
predAPTm <- sapply(rddens.s, function(z) mean(sola3pt[,1] + sola3pt[,2]*0.5 + sola3pt[,3]*z) )#
predAPTi <- sapply(rddens.s, function(z) HPDi(sola3pt[,1] + sola3pt[,2]*0.5 + sola3pt[,3]*z, 0.95) )
pztrt <- (MCMCglmm(phenazine ~  rddens ,data=mixAAtrt,nitt=100000,verbose=F)) #rddens NEG#
solpzt <- pztrt$Sol#
predPZTm <- sapply(rddens.s, function(z) mean(solpzt[,1] + solpzt[,2]*z) )#
predPZTi <- sapply(rddens.s, function(z) HPDi(solpzt[,1] + solpzt[,2]*z, 0.95) )
pzod <- (MCMCglmm(phenazine~ lnOD600 ,data=mixAAtrtbio,nitt=100000,verbose=F))##
solpzod <- pzod$Sol#
predpzodm <- sapply(od.s, function(z) mean(solpzod[,1] + solpzod[,2]*z) )#
predpzodi <- sapply(od.s, function(z) HPDi(solpzod[,1] + solpzod[,2]*z, 0.95))
toxutrt <- MCMCglmm(logtoxu ~ rddens,data=mixAAtrt,nitt=100000,verbose=F) #sig neg
cor(mixAAtrt$logtoxu,mixAAtrt[,7:13])#
soltoxu <- toxutrt$Sol#
predTXm <- sapply(rddens.s, function(z) mean(soltoxu[,1] + soltoxu[,2]*z) ) #
predTXi <- sapply(rddens.s, function(z) HPDi(soltoxu[,1] + soltoxu[,2]*z, 0.95) )#
(exp(predTXm[1])-exp(predTXm[1000]))/exp(predTXm[1])
mixAAtrt2 <- mixAAtrt#
mixAAtrt2$glycosylatedBZT <- scale(mixAAtrt$glycosylatedBZT)#
mixAAtrt2$methylBZT <- scale(mixAAtrt$methylBZT)#
mixAAtrt2$aniline <- scale(mixAAtrt$aniline)#
mixAAtrtsm <- mixAAtrt2[mixAAtrt$Salt==.8 & mixAAtrt$micrnum==1,]#
mixAAtrtsn <- mixAAtrt2[mixAAtrt$Salt==.8 & mixAAtrt$micrnum<1,]#
mixAAtrtnm <- mixAAtrt2[mixAAtrt$Salt<.8 & mixAAtrt$micrnum==1,]#
mixAAtrtnn <- mixAAtrt2[mixAAtrt$Salt<.8 & mixAAtrt$micrnum<1,]#
percentrankvar <- c()#
for(p in 6:13){#
	msm <- mixAAtrtsm#
	msn <- mixAAtrtsn#
	mnm <- mixAAtrtnm#
	mnn <- mixAAtrtnn#
	colnames(msm)[p] <- "resp"; colnames(msn)[p] <- "resp";	colnames(mnm)[p] <- "resp"; colnames(mnn)[p] <- "resp"#
	vgs <- unlist(lapply(list(msm,msn,mnm,mnn),function(dat)   #
		mean(MCMCglmm(resp~1,random=~Genotype,data=dat,verbose=F,nitt=1000000,thin=10,burnin=10000)$VCV[,"Genotype"])#
	))#
	gmns <- sapply(list(msm,msn,mnm,mnn), function(dat) tapply(dat$resp,dat$Genotype,mean))#
	vic <- sum(unlist( sapply(4:2, function(j) sapply( (j-1):1, function(i) #
				2*sqrt(vgs[i])*sqrt(vgs[j])*(1-cor(gmns[,i],gmns[,j] ) )#
			  )   ) ) )/(4*(4-1))#
	vhv <- sum(unlist( sapply(4:2, function(j) sapply( (j-1):1, function(i) #
				(sqrt(vgs[i])-sqrt(vgs[j]) )^2#
			  )   ) ) )/(4*(4-1))#
	percentrankvar[p-5] <- (vic/(vic+vhv))#
}
percentrankvar
mixAAdens		<- sapply(sort(unique(transf$Genotype)), function(g) mean(transf$density[transf$Genotype==g],na.rm=T)/1000)#
mixAAkmC	<- sapply(sort(unique(transf$Genotype)), function(g) mean(transf$km[transf$Genotype==g],na.rm=T))#
NLmixAAsaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsAAnm[transf$Genotype==g & transf$Salt=="0.8" &  transf$Microbes=="Yes",p],na.rm=T) ))#
NLmixAAnosaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsAAnm[transf$Genotype==g & transf$Salt=="0" &  transf$Microbes=="Yes",p],na.rm=T)))#
NLmixAAsaltn <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsAAnm[transf$Genotype==g & transf$Salt=="0.8" &  transf$Microbes=="No",p],na.rm=T) ))#
NLmixAAnosaltn <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsAAnm[transf$Genotype==g & transf$Salt=="0" &  transf$Microbes=="No",p],na.rm=T)))#
productsbioAAnm <- productsAAnm[!is.na(mixAAtrt$OD600),]#
productsbioAAnm[,2:8] <- productsAAnm[!is.na(mixAAtrt$OD600),2:8]#
transfbio <- transf[!is.na(mixAAtrt$OD600),]#
NLbioAAgensaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsbioAAnm[ transfbio$Genotype==g & transfbio$Salt=="0.8" &  transfbio$Microbes=="Yes",p],na.rm=T)))#
NLbioAAgennosaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsbioAAnm[ transfbio$Genotype==g & transfbio$Salt=="0" &  transfbio$Microbes=="Yes",p],na.rm=T)))#
NLbioAAgensaltn <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsbioAAnm[ transfbio$Genotype==g & transfbio$Salt=="0.8" &  transfbio$Microbes=="No",p],na.rm=T)))#
NLbioAAgennosaltn <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(productsbioAAnm[ transfbio$Genotype==g & transfbio$Salt=="0" &  transfbio$Microbes=="Yes",p],na.rm=T)))#
NLbioodgentrt <- sapply(sort(unique(transf$Genotype)), function(g)  sapply(c(0,0.8), function(salt)#
						sapply(c("Yes","No"), function(micr) mean(mixAAtrtbio$lnOD600[ mixAAtrtbio$Genotype==g & mixAAtrtbio$Salt==salt &mixAAtrtbio$Microbes==micr],na.rm=T)) )) #
			#genotypes in columns, treatments rows: first two at zero salt, and very first with microbes#
NLbiopxgentrt <- sapply(sort(unique(transf$Genotype)), function(g)  sapply(c(0,0.8), function(salt)#
						sapply(c("Yes","No"), function(micr) mean(mixAAtrtbio$deltasqmm[ mixAAtrtbio$Genotype==g & mixAAtrtbio$Salt==salt &mixAAtrtbio$Microbes==micr],na.rm=T)) )) #
			#genotypes in columns, treatments rows: first two at zero salt, and very first with microbes#
#
saltBmns <- sapply(1:8, function(z) tapply(productsAAnm[,z], mixAAtrt$Salt, mean))#
saltBses <- sapply(1:8, function(z) tapply(productsAAnm[,z], mixAAtrt$Salt, std.error))#
#
ylimsB <- list( c(78,100), c(0,50), c(0,250), 		c(0,220) ,c(0,100), c(0,35),  			c(0,100), c(0,35), c(0,500), c(0,500))#
atv <- list(c(80,90,100), c(0,25,50), c(0,100,200), c(0,100,200), c(0,40,80), c(0,15,30), c(0,40,80),c(0,15,30), c(0,250,500), c(0,250,500)   )
#reaction norm plots#
layout(matrix(1:40,ncol=5,byrow=T) ,widths=c(.6,.8,.8,.8,.8),heights=c(1,.25,1,1,1,1,1,1))#
par(oma = c(5.25,1,3,1))#
for(i in c(1,11,2,3,7,8,5,6)){#
	if(i==11){#
	plot(1:2~c(1:2),pch=NA,bty="n",yaxt="n",xaxt="n",xlab="",ylab="")#
	plot(1:2~c(1:2),pch=NA,bty="n",yaxt="n",xaxt="n",xlab="",ylab="")#
	plot(1:2~c(1:2),pch=NA,bty="n",yaxt="n",xaxt="n",xlab="",ylab="")#
	plot(1:2~c(1:2),pch=NA,bty="n",yaxt="n",xaxt="n",xlab="",ylab="")#
	plot(1:2~c(1:2),pch=NA,bty="n",yaxt="n",xaxt="n",xlab="",ylab="")#
	} else{#
	par(mar=c(0,2,0,0))#
	plot(saltBmns[,i]~c(1:2),col=c(rgb(0.4,0,0),rgb(1,0,0)), xaxt="n",yaxt="n",pch=1,cex=1.5,xlim=c(0.75,2.25),#
			ylim=ylimsB[[i]] )#
		arrows(1:2, y0=saltBmns[,i] - saltBses[,i], y1=saltBmns[,i] + saltBses[,i],length=0,col=c(rgb(0.4,0,0),rgb(1,0,0)))#
		if(i==6){axis(side=1,at=c(1,2),las=2,labels=c("0","0.8"))}#
		if(i==6){mtext(side=1,"salt g/L",line=3,cex=0.85)}#
		axis(side=2,at=atv[[i]],las=2)#
		#bztr, methoxyBZT, and amino3phenol have sig salt effs#
		if(i==1){text(1.5,ylimsB[[i]][2]*0.95,"*",cex=2)}#
		if(i%in%c(5,8)){text(1.5,ylimsB[[i]][2]*0.75,"*",cex=2)}#
	par(mar=c(0,0,0,0))#
	plot(NLmixAAnosaltn[i,]~rep(1,times=ncol(NLmixAAnosaltn)), xlim=c(0.5,4.5),#
		ylim=ylimsB[[i]], xlab="",xaxt="n",yaxt="n",ylab="" ,#
		col=rgb(0,(1-range01(mixAAdens))*0.6,0,alpha=0.5),pch=16)#
		points(NLmixAAsaltn[i,]~rep(2,times=ncol(NLmixAAnosaltn)), col=rgb(0,(1-range01(mixAAdens))*0.6,0,alpha=0.5),pch=16)#
		points(NLmixAAnosaltm[i,]~rep(3,times=ncol(NLmixAAsaltn)), col=rgb(0,(1-range01(mixAAdens))*0.6,0,alpha=0.5),pch=16)#
		points(NLmixAAsaltm[i,]~rep(4,times=ncol(NLmixAAsaltn)), col=rgb(0,(1-range01(mixAAdens))*0.6,0,alpha=0.5),pch=16)#
		sapply(1:ncol(NLmixAAnosaltn), function(z) #
			lines(c(NLmixAAnosaltn[i,z],NLmixAAsaltn[i,z] ) ~ c(1,2),col= rgb(0,(1-range01(mixAAdens)[z])*0.6,0)) ) #
		sapply(1:ncol(NLmixAAsaltn), function(z) #
			lines(c(NLmixAAsaltn[i,z],NLmixAAnosaltm[i,z] ) ~ c(2,3),col= rgb(0,(1-range01(mixAAdens)[z])*0.6,0)) ) #
		sapply(1:ncol(NLmixAAsaltn), function(z) #
			lines(c(NLmixAAnosaltm[i,z],NLmixAAsaltm[i,z] ) ~ c(3,4),col= rgb(0,(1-range01(mixAAdens)[z])*0.6,0)) ) #
		abline(v=2.5,lty=2)#
		if(i==6){axis(side=1,at=c(1,2,3,4),labels=c("0","0.8","0","0.8"),las=2)}#
		if(i==6){mtext(side=1,"salt g/L",line=3,cex=0.85)}#
		if(i==1){mtext("disrupted",side=3, line=0.75,cex=0.75,adj=0)}#
		if(i==1){mtext("local",side=3, line=0.75,cex=0.75,adj=1)}#
		if(i==1){mtext("micr.",side=3, line=0.1,cex=0.75,adj=0)}#
		if(i==1){mtext("micr.",side=3, line=0.1,cex=0.75,adj=1)}#
		if(i!=1){text(x=4,y=ylimsB[[i]][2]*.9,paste(round(percentrankvar[i]*100),"%"))#
			} else{		text(x=4,y=ylimsB[[i]][2]*0.8,paste(round(percentrankvar[i]*100),"%"))}#
	plot(c(NLmixAAnosaltn[i,],NLmixAAnosaltm[i,],NLmixAAsaltn[i,],NLmixAAsaltm[i,])~rep(mixAAdens,times=4), #
		ylim=ylimsB[[i]],#
		 xlab="",xaxt="n",yaxt="n",ylab="" ,  pch=1, col=rgb(0,0,0,alpha=0.5))#
		if(i==1){lines(predBRTm~rddens.s)}#
		if(i==1){polygon(c(rddens.s,rev(rddens.s)), c(predBRTi[1,], rev(predBRTi[2,])),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==3){lines(exp(predBATm)~rddens.s)}#
		if(i==3){polygon(c(rddens.s,rev(rddens.s)), exp(c(predBATi[1,], rev(predBATi[2,]))),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==8){lines(exp(predMBTm)~rddens.s)}#
		if(i==8){polygon(c(rddens.s,rev(rddens.s)), exp(c(predMBTi[1,], rev(predMBTi[2,]))),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==5){lines(exp(predAPTm)~rddens.s)}#
		if(i==5){polygon(c(rddens.s,rev(rddens.s)), exp(c(predAPTi[1,], rev(predAPTi[2,]))),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==6){lines(exp(predPZTm)~rddens.s)}#
		if(i==6){polygon(c(rddens.s,rev(rddens.s)), exp(c(predPZTi[1,], rev(predPZTi[2,]))),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==6){mtext(side=1,"road density",line=3,cex=0.85)}#
		if(i==6){axis(side=1,las=2,gap.axis=1.5)}#
		if(i==2){mtext(side=3,"transformation product, nM",line=0.1, adj=0.3)}#
		if(i==1){mtext(side=3,"% benzotriazole removed",line=1.7, adj = 0.25)}#
	plot( c(NLbioAAgennosaltm[i,],NLbioAAgennosaltn[i,],NLbioAAgensaltm[i,],NLbioAAgensaltn[i,] ) ~c(NLbiopxgentrt[1,] ,NLbiopxgentrt[2,] , NLbiopxgentrt[3,] ,NLbiopxgentrt[4,] ), ylim=ylimsB[[i]],#
		 xlab="",xaxt="n",yaxt="n",ylab="" ,  pch=1, col=rgb(0,0,0,alpha=0.5))#
	if(i==1){lines(predBpxm~dsqm.s)}#
		if(i==1){polygon(c(dsqm.s,rev(dsqm.s)), c(predBpxi[1,], rev(predBpxi[2,])),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==2){lines(predGpxm~dsqm.s)}#
		if(i==2){polygon(c(dsqm.s,rev(dsqm.s)), c(predGpxi[1,], rev(predGpxi[2,])),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==6){mtext(side=1,"plant growth",line=3,cex=0.85)}#
		if(i==6){mtext(side=1,bquote("mm"^2),line=4.25,cex=0.85)}#
		if(i==6){axis(side=1,las=2,gap.axis=1.5)}#
	plot( c(NLbioAAgennosaltm[i,],NLbioAAgennosaltn[i,],NLbioAAgensaltm[i,],NLbioAAgensaltn[i,] ) ~c(NLbioodgentrt[1,] ,NLbioodgentrt[2,] , NLbioodgentrt[3,] ,NLbioodgentrt[4,] ), ylim=ylimsB[[i]],#
		 xlab="",xaxt="n",yaxt="n",ylab="" ,  pch=1, col=rgb(0,0,0,alpha=0.5))#
		if(i==3){lines(exp(predBaom)~od.s)}#
		if(i==3){polygon(c(od.s,rev(od.s)), exp(c(predBaoi[1,], rev(predBaoi[2,]))),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==2){lines(predGodm~od.s)}#
		if(i==2){polygon(c(od.s,rev(od.s)), c(predGodi[1,], rev(predGodi[2,])),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==7){lines(predMBom~od.s)}#
		if(i==7){polygon(c(od.s,rev(od.s)), c(predMBoi[1,], rev(predMBoi[2,])),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==6){lines(exp(predpzodm)~od.s)}#
		if(i==6){polygon(c(od.s,rev(od.s)), exp(c(predpzodi[1,], rev(predpzodi[2,])) ),col=rgb(0,0,0,alpha=0.5),border=NA )  }#
		if(i==6){mtext(side=1,"microbe growth",line=3,cex=0.85)}#
		if(i==6){mtext(side=1,"ln(OD)",line=4.25,cex=0.85)}#
		if(i==6){axis(side=1,las=2,gap.axis=1.5)}#
	}#
	}
mixAAsaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(mixAA[transf$Genotype==g & transf$Salt=="0.8" &  transf$Microbes=="Yes",p],na.rm=T) ))#
mixAAnosaltm <- sapply(sort(unique(transf$Genotype)), function(g) sapply(1:ncol(mixAA), function(p) mean(mixAA[transf$Genotype==g & transf$Salt=="0" &  transf$Microbes=="Yes",p],na.rm=T)))#
#
##prepare tree#
hier.phy3 <- hier.phy#
	treegenus <- sapply(1:250,function(T) tail(unlist(strsplit(mastertax.s[ hier.phy$tip.label[T], 6 ],"g__",fixed=T)),1))#
	treesp <- sapply(1:250,function(T) tail(unlist(strsplit(mastertax.s[ hier.phy$tip.label[T], 7],"s__",fixed=T)),1))#
	treefam <- sapply(1:250,function(T) tail(unlist(strsplit(mastertax.s[ hier.phy$tip.label[T], 5],"f__",fixed=T)),1))#
	treefam[treefam=="[Weeksellaceae]"] <- "Weeksellaceae"#
	treefam[treefam=="[Exiguobacteraceae]"] <- "Exiguobacteraceae"#
	treefam[treefam=="[Chromatiaceae]"] <- "Chromatiaceae"#
	tiplabeldat <- data.frame(label = hier.phy3$tip.label, fam=treefam, genus = treegenus,#
                species = treesp)#
hier.phy3$edge.length[is.na(hier.phy3$edge.length)] <- 0#
#
#function for microbe phylogeny- products analysis#
tipxout <- function(prdtrtmat, balances, tree ){ #prdtrtmat has rownames for products and colnames for genos#
	ntip <- tree$Nnode + 1#
	nnode <- tree$Nnode #
	cormat <- sapply(1:nrow(prdtrtmat), function(z) cor(prdtrtmat[z,],t(balances)) )#
	colnames(cormat) <- rownames(prdtrtmat)#
	rownames(cormat) <- rownames(balances)#
	nodesout <- sapply(1:ncol(cormat), function(z)  abs(cormat[,z]) > quantile(abs(cormat[,z]),0.95)) #
	tipsout <- lapply(1:ncol(nodesout), function(z) sapply(row.names(cormat)[which(nodesout[,z])],#
										 function(name)  Descendants(tree, node= ntip + which(tree$node.label==name),type="tips" ) )  )#
	tipisoutR <- sapply(1:length(tipsout), function(l) sapply(1:ntip, function(T) sum(unlist(tipsout[[l]]) ==T) ) )#
	return(tipisoutR)#
}#
#
#run analysis for transformation products#
maanss <-rbind(mixAAsaltm,mixAAnosaltm)#
	rownames(maanss) <- c( colnames(mixAA), paste(colnames(mixAA),"_S",sep="")  )#
tipisout <- tipxout(maanss,subbalphy,hier.phy)#
ntipisout <- list()#
for(i in 1:1000){#
	nmaanss <- maanss[,sample(1:ncol(maanss),repl=F)]#
	ntipisout[[i]] <-  tipxout(nmaanss,subbalphy,hier.phy)#
}#
reord <- lapply(1:ncol(tipisout), function(prd) sapply(1:length(ntipisout), function(n) ntipisout[[n]][,prd]) )#
int <- sapply(1:ncol(tipisout), function(p) sapply(1:nrow(tipisout),function(T) findInterval(tipisout[T,p],sort(reord[[p]][T,]) ,left.open=T )/length(reord[[p]][T,]) ) )#
tipisoutpernode <- int#
tipisoutpernode [tipisoutpernode<0.95] <- 0#
reorderTOpn <- tipisoutpernode[,c(9,1,10,2,11,3,12,4,13,5,14,6,15,7,16,8)]#no salt first #(1,9,2,10,3,11,4,12,5,13,6,14,7,15,8,16)]#
row.names(reorderTOpn)<- hier.phy3$tip.label#
rotodfpn <- as.data.frame(reorderTOpn)#
colnames(rotodfpn) <- c(" ","  "," ","  "," ","  "," ","  "," ","  "," ","  "," ","  "," ","  ")#
#
###run analysis for microbe and plant growth#
biogeno4corM <- (biogenotrt[c(42,44,46,48,154,156,158,160,50,52,54,56),colnames(biogenotrt)%in%transf$Genotype]) #alternating beacuse selecting only inoculated treatments#
#the rows selected correspond to the treatments below - all are inoculated treatments#
row.names(biogeno4corM) <- c("F10.00","F10.0S","F10.B0","F10.BS","dsqm.00","dsqm.0S","dsqm.B0","dsqm.BS","od600.00","od600.0S","od600.B0","od600.BS")#
colnames(bal.phy)==colnames(biogeno4corM) #check names#
#
tipisoutbio <- tipxout(biogeno4corM,bal.phy,hier.phy)#
nBtipisout <- list()#
for(i in 1:1000){#
	nbiogeno4corM <- biogeno4corM[,sample(1:ncol(biogeno4corM),repl=F)]#
	nBtipisout[[i]] <-  tipxout(nbiogeno4corM,bal.phy,hier.phy)#
}#
Breord <- lapply(1:ncol(tipisoutbio), function(prd) sapply(1:length(nBtipisout), function(n) nBtipisout[[n]][,prd]) )#
Bint <- sapply(1:ncol(tipisoutbio), function(p) sapply(1:nrow(tipisoutbio),function(T) findInterval(tipisoutbio[T,p],sort(Breord[[p]][T,]) ,left.open=T )/length(Breord[[p]][T,]) ) )#
Btipisoutpernode <- Bint#
Btipisoutpernode [Btipisoutpernode<0.95] <- 0#
row.names(Btipisoutpernode)<- hier.phy3$tip.label#
biotodfpn <- as.data.frame(Btipisoutpernode)#
colnames(biotodfpn) <- c(" ","  "," ","  "," ","  "," ","  "," ","  "," ","  ")#
#collect some node numbers, names for pieces of the tree#
hier.phy2 <- hier.phy#
hier.phy2$tip.label <- as.character(treefam)#
pdf("check_nodes.pdf", width = 9, height=24)#
gtree <- ggtree(hier.phy2,ladderize=F,color="gray") + geom_tiplab()  + geom_nodelab() + scale_fill_manual(values =rep(c(rgb(0,0,0.4),rgb(0,0,0.55),rgb(0,0,0.7),rgb(0,0,0.95)), times=9) )#
gtree + xlim(0,25)#
dev.off()#
hier.phyg <- hier.phy2#
hier.phyg$tip.label <- as.character(treegenus)#
pdf("check_nodes_genera.pdf", width = 9, height=24)#
gtree <- ggtree(hier.phyg,ladderize=F,color="gray") + geom_tiplab()  + geom_nodelab() + scale_fill_manual(values =rep(c(rgb(0,0,0.4),rgb(0,0,0.55),rgb(0,0,0.7),rgb(0,0,0.95)), times=9) )#
gtree + xlim(0,25)#
dev.off()#
hier.physp <- hier.phy2#
hier.physp$tip.label <- as.character(treesp)#
pdf("check_nodes_sp.pdf", width = 9, height=24)#
gtree <- ggtree(hier.physp,ladderize=F,color="gray") + geom_tiplab()  + geom_nodelab() + scale_fill_manual(values =rep(c(rgb(0,0,0.4),rgb(0,0,0.55),rgb(0,0,0.7),rgb(0,0,0.95)), times=9) )#
gtree + xlim(0,25)#
dev.off()#
#inspecting tree, visually determine match between nodes and taxonomy assigned family names#
famnodes <-  c("y97","y96","y32","y22","y16", #
								"y21","y40",#
								"y43","y18",#
								"y78","y15")#
famnodeNames <- c("Aeromonadaceae","Enterobacteriaceae","Pseudomonadaceae","Rhizobiaceae +","Comamonadaceae +", #Hyphomicrobiales is primarily rhizobiacae; burkholderiales is primarily comamonadaceae#
							"Caulobacteriaceae","Bacillaceae +", #bacillaceae contains exiguobacteriaceae#
						"Flavobacteriaceae","Moraxellaceae",#
						"Chromatiaceae","Xanthomonadaceae")#
		 # note that most recent greengenes taxonomy information does not fully reflect the most recent bacterial phylogeny#
		 # Thus many (most) of these families are paraphyletic#
famnodeLs <- sapply(famnodes, function(z) which(hier.phy3$node.label == z) )#
hier.phynodenams <- hier.phy3#
hier.phynodenams$node.label[!(hier.phynodenams$node.label%in%famnodes)] <- "  "#
hier.phynodenams$node.label[famnodeLs] <- famnodeNames#
tiplabeldat$fam2 <- tiplabeldat$fam#
tiplabeldat$fam2[is.na(tiplabeldat$fam2)] <- "NA"#
tiplabeldat$fam2[tiplabeldat$fam2==""] <- "unk"#
filldat <- data.frame(id= unlist(famnodeLs)+250, type=famnodeNames)
gtree <- ggtree(hier.phynodenams,ladderize=F,color="gray") + geom_hilight(data=filldat, mapping=aes(node=id, fill=type,extend=9),show.legend=FALSE)  + geom_nodelab() + scale_fill_manual(values =#
			c(rgb(0,0.1,0.2),rgb(0.1,0,0.26),rgb(0,0,0.32),rgb(0,0.1,0.38),rgb(0.1,0,0.44), rgb(0,0,0.5),rgb(0,0.1,0.56),rgb(0.1,0,0.72),rgb(0,0,0.8),rgb(0,0.1,0.86), rgb(0.1,0,0.92)) )#
p <- gtree + new_scale_fill()#
p<-gheatmap(p, rotodfpn[,c(1:2)], offset=0,  width=.1,  high=rgb(0,0,0),low="gray")#colnames_angle=90, colnames_offset_y = 20,#
p1 <- p + new_scale_fill()#
p1<-gheatmap(p1, rotodfpn[,c(3:4)], offset=0.075,  width=.1 )#, colnames_angle=90, colnames_offset_y = 20)#, high=rgb(0,0,0.75),low="gray")#
p1<-gheatmap(p1, rotodfpn[,c(5:6)], offset=0.15,  width=.1, high=rgb(0,.75,0.5),low="gray")#, colnames_angle=90, colnames_offset_y = 20#
p2 <- p1 + new_scale_fill()#
p2<-gheatmap(p2, rotodfpn[,c(13:14)], offset=0.225, width=.1 )#, colnames_angle=90, colnames_offset_y = 13)#
p2<-gheatmap(p2, rotodfpn[,c(15:16)], offset=0.3,   width=.1, high=rgb(0.5,0.25,1),low="gray") #colnames_angle=90, colnames_offset_y = 21, #
p3 <- p2 + new_scale_fill()#
p3<-gheatmap(p3, rotodfpn[,c(9:10)], offset=0.375,  width=.1 )#, colnames_angle=90, colnames_offset_y = 25)#,  high=rgb(0,0,0.75),low="gray") #
p3<-gheatmap(p3, rotodfpn[,c(11:12)], offset=0.45,  width=.1,  high=rgb(1.0,0.54,0),low="gray") # legend_title="interval")   , colnames_angle=90, colnames_offset_y = 25,      #
p3
gtree <- ggtree(hier.phynodenams,ladderize=F,color="gray") + geom_hilight(data=filldat, mapping=aes(node=id, fill=type,extend=9),show.legend=FALSE)  + geom_nodelab() + scale_fill_manual(values =#
			c(rgb(0,0.1,0.2),rgb(0.1,0,0.26),rgb(0,0,0.32),rgb(0,0.1,0.38),rgb(0.1,0,0.44), rgb(0,0,0.5),rgb(0,0.1,0.56),rgb(0.1,0,0.72),rgb(0,0,0.8),rgb(0,0.1,0.86), rgb(0.1,0,0.92)) )#
p <- gtree + new_scale_fill()#
p<-gheatmap(p, biotodfpn[,c(7:8)], offset=0,  width=.1, )#colnames_angle=90, colnames_offset_y = 20,#
p1<-gheatmap(p, biotodfpn[,c(11:12)], offset=0.075,  width=.1,  high=rgb(0,0,0),low="gray")#, colnames_angle=90, colnames_offset_y = 20)#, high=rgb(0,0,0.75),low="gray")#
p1
reccormat <- sapply(1:nrow(rbind(mixAAsaltm,mixAAnosaltm)), function(z) cor(rbind(mixAAsaltm,mixAAnosaltm)[z,],t(subbalphy)) )#
	reccormatO <- reccormat[,c(1,9,2,10,3,11,4,12,5,13,6,14,7,15,8,16)]#
tagged <- sapply(1:ncol(reccormatO), function(z) paste("y",which(abs(reccormatO[,z])> quantile(abs(reccormatO[,z]),0.95)) -1 , sep=""))#
###REPLACE numbers at HERE with column number for product of interest. does not run inside for loop due to ggtree errors#
pdf(paste("check_cor_nodes",1,".pdf", sep=""), width = 9, height=24) ##HERE, currently 1#
hier.taggednod <- hier.phy2#
hier.taggednod$tip.label <- as.character(treefam)#
hier.taggednod$node.label[!(hier.taggednod$node.label%in%tagged[,1])] <- "  " ###HERE#
gtree <- ggtree(hier.taggednod,ladderize=F,color="gray") + geom_tiplab()  + geom_nodelab() + scale_fill_manual(values =rep(c(rgb(0,0,0.4),rgb(0,0,0.55),rgb(0,0,0.7),rgb(0,0,0.95)), times=9) )#
gtree + xlim(0,25)#
dev.off()#
#BZT: 1 and 2 share y131 and y147 & nodes below, and for column 1, node y73 is just before these; they also share 105, but is v small clade#
#glyBZT: 3 and 4, no interesting tips of significance in balance figure, skip; there are some shared nodes however - y23, y39, y137, y118, y131#
#BZT a+ aa: 5 and 6, both share hits in rhizobiaceae, though only y84 itself shared (5 has an additional deeper tree hit, 6 hits tippier, try y22 which splits a big clade, and y10 as origin), and pseudomonadaceae, but mostly not the same nodes try y119 which splits sets of tagged nodes.#
#col 7 and 8 are aniline.#
#a3ph: col 9 and ten, PRIMARILY Aeromonadaceae hits, either within or leading to. Try y138, which is major clade split, y77, which splits from entero*. y122 shared but one branch a single, fairly rare taxon.  y13 also appears in both (in both early chitin* and cytoph*)#
#phz: col 11 shares aeromonadaceae hits and y13 with 9 and ten, whereas 12 has no tips passing thesholds in our figure#
#mBZT: for 13,  many of the highest ones are in xanthomonadaceae. might consider pseudomonadaceae; column 14 nearly no thresholds passed according to full figure; y195 in aero shared, y94 in pseudos, col14 has bunch of hits in pseudomonadaceae#
#moxyBZT: skip, not much of interest in balance figure. only cluster passing threshold occurs at less than 1% and in only 3 inocula#
#
####
#get sums of taxa subtending families:#
phylopseudos <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y32")+250,type="tips"))],])#
phyloaeros <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y97")+250,type="tips"))],])#
phylorhizos <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y22")+250,type="tips"))],])#
phyloxanthos <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y15")+250,type="tips"))],])#
phyloenteros <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y96")+250,type="tips"))],])#
tolumonasclade <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y154")+250,type="tips"))],])#
aeromonasclade <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y155")+250,type="tips"))],])#
caulobact <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y21")+250,type="tips"))],])#
rhizoout <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y39")+250,type="tips"))],])#
rhizoin <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y38")+250,type="tips"))],])#
pveron <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y133")+250,type="tips"))],])#
pother <- colSums(mastertab.s[hier.phy$tip.label[unlist(Descendants(hier.phy,which(hier.phy$node.label=="y134")+250,type="tips"))],])#
#
#deterimine balance direction:#
cor(subbalphy[139,],aeromonasclade); cor(subbalphy[139,],tolumonasclade)#as balance increases, relative aeromonas increases#
cor(subbalphy[11,],phylorhizos); cor(subbalphy[11,],caulobact) #as balance increases, relative caulobacter decreases#
cor(subbalphy[78,],phyloenteros); cor(subbalphy[78,],phyloaeros) # as balance increases, relative entero. decrease and relative aero. increase#
cor(subbalphy[23,],rhizoout); cor(subbalphy[23,],rhizoin) # as balance increases, outgroup rhizobia relatively increase, and ingroup rhizobiaceae somewhat relatively decrease#
cor(subbalphy[120,],pveron); cor(subbalphy[120,],pother) # as balance increases, relative veronii decrease#
# rhizobiaceae and pseudomonadaceae with  bztaa, across salt#
BZTaaBacdat <- data.frame(BZTaa = c(mixAAsaltm[3,],mixAAnosaltm[3,] ),#
						y22=rep(subbalphy[23,],times=2),y10=rep(subbalphy[11,],times=2), y17=rep(subbalphy[18,],times=2), y119=rep(subbalphy[120,],times=2), #
						phylorhizos = rep(phylorhizos,times=2), #rhizos= rep(colSums(mastertab.s[which(mastertax.s[,5]=="f__Rhizobiaceae"),]),times=2),#
						phylopseudos = rep(phylopseudos,times=2), #pseudos= rep(colSums(mastertab.s[which(mastertax.s[,5]=="f__Pseudomonadaceae"),]),times=2),#
						rddens = rep(tapply(transf$density,transf$Genotype,mean),times=2)/1000) #
mgenos <- transf$Genotype[ transf$Microbes=="Yes"]#
mindex <- sapply(mgenos, function(z) which(colnames(subbalphy)==z)) #
#full replicate transformation products data#
BZTaaBacdatf <- data.frame(BZTaa = mixAA[transf$Microbes=="Yes",3], #
					phylorhizos = phylorhizos[ mindex  ], #rhizos= colSums(mastertab.s[which(mastertax.s[,5]=="f__Rhizobiaceae"),])[mindex],#
					phylopseudos = phylopseudos[ mindex  ], #pseudos= colSums(mastertab.s[which(mastertax.s[,5]=="f__Pseudomonadaceae"),])[mindex],#
					y22 = subbalphy[23,mindex], y10= subbalphy[11,mindex], y17 = subbalphy[18,mindex], y119 = subbalphy[120,mindex],#
					rddens = transf$density[transf$Microbes=="Yes"]/1000)
bztaaBrhizo <- (MCMCglmm(BZTaa~ log(phylorhizos + min(phylorhizos[phylorhizos>0]) ),data=BZTaaBacdatf,nitt=100000,burnin=10000,thin=10,verbose=F))#refit simple to understand#
rhizo.s <- seq(from=min(log(BZTaaBacdatf$phylorhizos+ min(phylorhizos[phylorhizos>0]))),to=max(log(BZTaaBacdatf$phylorhizos+ min(phylorhizos[phylorhizos>0]))),length.out=1000)##
#may want to refit best#
#bztaaBrhizo <- (MCMCglmm(BZTaa~ y10,data=BZTaaBacdatf,nitt=100000,burnin=10000,thin=10,verbose=F))#refit simple to understand#
#rhizo.s <- seq(from=min(BZTaaBacdatf$y10),to=max(BZTaaBacdatf$y10),length.out=1000)##
solbztaaR <- bztaaBrhizo$Sol#
prd.bztaaR <- sapply(rhizo.s, function(z) exp(mean(solbztaaR[,1] + solbztaaR[,2]*z )) ) #
hpdi.bztaaR <- sapply(rhizo.s, function(z) exp(HPDi(solbztaaR[,1] + solbztaaR[,2]*z ,.95)) )#
#
#aeromonadaceae with a3ph, and phenazine -- phz only without salt.#
data3ph <- data.frame(amino3ph = c(mixAAsaltm[5,],mixAAnosaltm[5,] ), phyloaeros=rep(phyloaeros,times=2),#
					 y138 = rep(subbalphy[139,],times=2), y77=rep( subbalphy[78,], times=2), rddens = rep(tapply(transf$density,transf$Genotype,mean),times=2)/1000)#
data3phf <- data.frame(amino3ph = mixAA$amino_3_phenol[transf$Microbes=="Yes"], phyloaeros = phyloaeros[ mindex  ], #
					y138 = subbalphy[139,mindex], y77 = subbalphy[78,mindex],#
					rddens = transf$density[transf$Salt==0.8 & transf$Microbes=="Yes"]/1000)
a3phAeros <- MCMCglmm(amino3ph~y138,data=data3phf,nitt=100000,burnin=10000,thin=10,verbose=F)#
aer.s <- seq(from=min(data3ph$y138),to=max(data3ph$y138),length.out=1000)#
sola3paos <- a3phAeros$Sol#
prd.a3paos <- sapply(aer.s, function(z) exp(mean(sola3paos[,1] + sola3paos[,2]*z)))#
hpdi.a3paos <- sapply(aer.s, function(z) exp(HPDi(sola3paos[,1] + sola3paos[,2]*z,.95)))#
datphz <- data.frame(phz = c(mixAAsaltm[6,]), phyloaeros=phyloaeros,#
					 y138 = subbalphy[139,], y77= subbalphy[78,],rddens = tapply(transf$density,transf$Genotype,mean)/1000)#
smgenos <- transf$Genotype[transf$Salt==0.8 & transf$Microbes=="Yes"]#
smindex <- sapply(smgenos, function(z) which(colnames(subbalphy)==z)) #
datphzf <- data.frame(phz = mixAA$phenazine[transf$Microbes=="Yes" & transf$Salt==0.8], phyloaeros = phyloaeros[ smindex  ], #
					y138 = subbalphy[139,smindex], y77 = subbalphy[78,smindex],#
					rddens = transf$density[transf$Salt==0.8 & transf$Microbes=="Yes"]/1000)
phzAeros <- MCMCglmm(phz~y138,data=datphzf,nitt=100000,burnin=10000,thin=10,verbose=F)#
aer.s <- seq(from=min(datphz$y138),to=max(datphz$y138),length.out=1000)#
solphz <- phzAeros$Sol#
prd.phz <- sapply(aer.s, function(z) exp(mean(solphz[,1] + solphz[,2]*z)))#
hpdi.phz <- sapply(aer.s, function(z) exp(HPDi(solphz[,1] + solphz[,2]*z,.95)))#
#
# xantho/pseduomonadaceae with 1mBZT, only with salt.#
datmbzt <- data.frame(mBZT = mixAAsaltm[7,], phylopseudos = phylopseudos, phyloxanthos = phyloxanthos,#
						rddens = tapply(transf$density,transf$Genotype,mean)/1000)#
datmbztf <- data.frame(mBZT = mixAA$methylBZT[transf$Salt==0.8 & transf$Microbes=="Yes"], #
					phylopseudos = phylopseudos[ smindex  ], phyloxanthos = phyloxanthos[smindex],#
					 rddens = transf$density[transf$Salt==0 & transf$Microbes=="Yes"]/1000)
mBZTsaltX <- (MCMCglmm(scale(mBZT)~phylopseudos,data=datmbztf,nitt=100000,burnin=10000,thin=10,verbose=F))#refit best#
pseud.s <- seq(from=min(datmbztf$phylopseudos),to=max(datmbztf$phylopseudos),length.out=1000)#
solmbztX <- mBZTsaltX$Sol#
prd.mbztX <- sapply(pseud.s, function(z) mean( (solmbztX[,1] + solmbztX[,2]*z)*sd(datmbztf$mBZT) + mean(datmbztf$mBZT))) #
hpdi.mbztX <- sapply(pseud.s, function(z) HPDi((solmbztX[,1] + solmbztX[,2]*z)*sd(datmbztf$mBZT) + mean(datmbztf$mBZT),.95))
par(mfrow=c(2,2))#
par(mar=c(5,5,1,1))#
  plot(exp(BZTaa)~log(BZTaaBacdat$phylorhizos+ min(phylorhizos[phylorhizos>0])),data=BZTaaBacdat,pch=NA,xlab="",ylab="",cex=1.5,ylim=bufferX(exp(BZTaaBacdat$BZTaa),.25))#
  	polygon(c(rhizo.s,rev(rhizo.s)),y=c(hpdi.bztaaR[1,],rev(hpdi.bztaaR[2,])),border=NA,col=rgb(0,0,0,alpha=0.25))#
  	lines(prd.bztaaR~rhizo.s)#
  	points(exp(BZTaa)~log(BZTaaBacdat$phylorhizos+ min(phylorhizos[phylorhizos>0])),data=BZTaaBacdat,pch=16,cex=1.5)#
  	mtext("log of Rhizobacteriaceae+",side=1,line=2.5)#
  	mtext("relative abundance",side=1,line=4)#
	mtext("BZTa + BZTaa nM",side=2,line=2)#
plot(mBZT~phylopseudos,data=datmbzt,xlab="",ylab="",cex=1.5,pch=NA,ylim=bufferX(datmbzt$mBZT,.05))#,col=rgb(range01(datPseudo$rddens),0,0))#
	polygon(c(pseud.s,rev(pseud.s)),y=c(hpdi.mbztX[1,],rev(hpdi.mbztX[2,])),border=NA,col=rgb(0,0,0,alpha=0.25))#
	lines(prd.mbztX~pseud.s)#
	points(mBZT~phylopseudos,data=datmbzt,pch=16,cex=1.5)#
	mtext("1-methylBZT nM",side=2,line=2)#
	mtext("Pseudomonadaceae",side=1,line=2.5)#
	mtext("relative abundance",side=1,line=4)#
plot(exp(amino3ph)~y138,data=data3ph,pch=NA,xlab="",ylab="",cex=1.5,ylim=bufferX(exp(data3ph$amino3ph),.25))#
	polygon(c(aer.s,rev(aer.s)),y=c(hpdi.a3paos[1,],rev(hpdi.a3paos[2,])),border=NA,col=rgb(0,0,0,alpha=0.25))#
	lines(prd.a3paos~aer.s)#
	points(exp(amino3ph)~y138,data=data3ph,pch=16,cex=1.5)#
	mtext("amino-3-phenol nM",side=2,line=2)#
	mtext("Balance of",side=1,line=2.5)#
	mtext("Aeromonas/Tolumonas",side=1,line=4)#
plot(exp(phz)~y138,data=datphz,pch=NA,xlab="",ylab="",cex=1.5,ylim=bufferX(exp(datphz$phz),.25))#
	polygon(c(aer.s,rev(aer.s)),y=c(hpdi.phz[1,],rev(hpdi.phz[2,])),border=NA,col=rgb(0,0,0,alpha=0.25))#
	lines(prd.phz~aer.s)#
	points(exp(phz)~y138,data=datphz,pch=16,cex=1.5)#
	mtext("phenazine nM",side=2,line=2)#
	mtext("Balance of",side=1,line=2.5)#
	mtext("Aeromonas/Tolumonas",side=1,line=4)
mrichindex <- sapply(mixAAtrtbio$Genotype, function(z) which(divdf$community == z) )#
datrich <- data.frame(cbind(mixAAtrtbio[mixAAtrtbio$Microbes=="Yes",]), #
					divdf[mrichindex,][mixAAtrtbio$Microbes=="Yes",])#
#
datrich_bytrt <- data.frame(BZTrv = c(mixAAnosaltm[1,], mixAAsaltm[1,]), #
							transfdivS = c(transfdivS,transfdivS), transfdivF = c(transfdivF,transfdivF),#
							transfdivPD = c(transfdivPD,transfdivPD))#
#primary reported measure of richness#
BZTr_richness <- (MCMCglmm(conc_corrected~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) # marginally sig pos#
summary(BZTr_richness)#
rich.s <- seq(from = min(datrich$richness),to=max(datrich$richness),length.out=1000)#
BZTrsol <- BZTr_richness$Sol#
BZTr.prd <- sapply(rich.s, function(z) mean(BZTrsol[,1] + BZTrsol[,2]*z   ) )#
BZTr.hpdi <- sapply(rich.s, function(z) HPDi(BZTrsol[,1] + BZTrsol[,2]*z, 0.95   ) )#
#
#test relationship between microbiome diversity and growth metrics, 1 mean per treatment#
duckgrowthrichness <- (MCMCglmm(deltasqmm~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
micrgrowthrichness <- (MCMCglmm(lnOD~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
# sig neg for dsqm#
summary(duckgrowthrichness)#
summary(micrgrowthrichness)#n.s.#
duckgrrsol <- duckgrowthrichness$Sol#
duckgr.prd <- sapply(rich.s, function(z) mean(duckgrrsol[,1] + duckgrrsol[,2]*z   ) )#
duckgr.hpdi <- sapply(rich.s, function(z) HPDi(duckgrrsol[,1] + duckgrrsol[,2]*z, 0.95   ) )#
#
richBmn <- tapply(datrich$conc_corrected,datrich$community,mean)#
richBse <- tapply(datrich$conc_corrected,datrich$community,std.error)#
richOmn <- tapply(datrich$lnOD,datrich$community,mean)#
richOse <- tapply(datrich$lnOD,datrich$community,std.error)#
richDmn <- tapply(datrich$deltasqmm,datrich$community,mean)#
richDse <- tapply(datrich$deltasqmm,datrich$community,std.error)#
richlev <- tapply(datrich$richness,datrich$community,mean)
cbind(mixAAtrtbio[mixAAtrtbio$Microbes=="Yes",])
divdf[mrichindex,][mixAAtrtbio$Microbes=="Yes",]
mrichindex
unlist(mrichindex)
mixAAtrtbio$Genotype
divdf$community
transfdivF
head(biodat)
sort(unique(biodat$genotype))
sort(unique(mixAAtrtbio$Genotype))
ivdf$community
divdf$community
divdf$community <- sort(unique(mixAAtrtbio$Genotype)) #reset to matching levels#
mrichindex <- sapply(mixAAtrtbio$Genotype, function(z) which(divdf$community == z) )
mrichindex
divdf
divdf <- data.frame(community1 = colnames(mastertab.s),richness=transfdivF,shannon = transfdivS,faithphylodiv=transfdivPD)
divdf$community <- sort(unique(mixAAtrtbio$Genotype)) #reset to matching levels#
mrichindex <- sapply(mixAAtrtbio$Genotype, function(z) which(divdf$community == z) )
divdf
divdf <- data.frame(community = colnames(mastertab.s),richness=transfdivF,shannon = transfdivS,faithphylodiv=transfdivPD)#
mrichindex <- sapply(mixAAtrtbio$Genotype, function(z) which(divdf$community == z) )
divdf
datrich <- data.frame(cbind(mixAAtrtbio[mixAAtrtbio$Microbes=="Yes",]), #
					divdf[mrichindex,][mixAAtrtbio$Microbes=="Yes",])#
#
datrich_bytrt <- data.frame(BZTrv = c(mixAAnosaltm[1,], mixAAsaltm[1,]), #
							transfdivS = c(transfdivS,transfdivS), transfdivF = c(transfdivF,transfdivF),#
							transfdivPD = c(transfdivPD,transfdivPD))#
#primary reported measure of richness#
BZTr_richness <- (MCMCglmm(conc_corrected~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) # marginally sig pos#
summary(BZTr_richness)#
rich.s <- seq(from = min(datrich$richness),to=max(datrich$richness),length.out=1000)#
BZTrsol <- BZTr_richness$Sol#
BZTr.prd <- sapply(rich.s, function(z) mean(BZTrsol[,1] + BZTrsol[,2]*z   ) )#
BZTr.hpdi <- sapply(rich.s, function(z) HPDi(BZTrsol[,1] + BZTrsol[,2]*z, 0.95   ) )#
#
#test relationship between microbiome diversity and growth metrics, 1 mean per treatment#
duckgrowthrichness <- (MCMCglmm(deltasqmm~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
micrgrowthrichness <- (MCMCglmm(lnOD~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
# sig neg for dsqm#
summary(duckgrowthrichness)#
summary(micrgrowthrichness)#n.s.#
duckgrrsol <- duckgrowthrichness$Sol#
duckgr.prd <- sapply(rich.s, function(z) mean(duckgrrsol[,1] + duckgrrsol[,2]*z   ) )#
duckgr.hpdi <- sapply(rich.s, function(z) HPDi(duckgrrsol[,1] + duckgrrsol[,2]*z, 0.95   ) )#
#
richBmn <- tapply(datrich$conc_corrected,datrich$community,mean)#
richBse <- tapply(datrich$conc_corrected,datrich$community,std.error)#
richOmn <- tapply(datrich$lnOD,datrich$community,mean)#
richOse <- tapply(datrich$lnOD,datrich$community,std.error)#
richDmn <- tapply(datrich$deltasqmm,datrich$community,mean)#
richDse <- tapply(datrich$deltasqmm,datrich$community,std.error)#
richlev <- tapply(datrich$richness,datrich$community,mean)
micrgrowthrichness <- (MCMCglmm(lnOD~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F))
head(datrich)
micrgrowthrichness <- (MCMCglmm(lnOD600~richness,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F))
# sig neg for dsqm#
summary(duckgrowthrichness)#
summary(micrgrowthrichness)#n.s.#
duckgrrsol <- duckgrowthrichness$Sol#
duckgr.prd <- sapply(rich.s, function(z) mean(duckgrrsol[,1] + duckgrrsol[,2]*z   ) )#
duckgr.hpdi <- sapply(rich.s, function(z) HPDi(duckgrrsol[,1] + duckgrrsol[,2]*z, 0.95   ) )#
#
richBmn <- tapply(datrich$conc_corrected,datrich$community,mean)#
richBse <- tapply(datrich$conc_corrected,datrich$community,std.error)#
richOmn <- tapply(datrich$lnOD600,datrich$community,mean)#
richOse <- tapply(datrich$lnOD600,datrich$community,std.error)#
richDmn <- tapply(datrich$deltasqmm,datrich$community,mean)#
richDse <- tapply(datrich$deltasqmm,datrich$community,std.error)#
richlev <- tapply(datrich$richness,datrich$community,mean)
par(mar=c(4,4,1,1))#
plot(richBmn~richlev,pch=NA,ylim=bufferX(c(richBmn-richBse,richBmn+richBse),p=0.05), ylab="", xlab="")#
	polygon(c(rich.s,rev(rich.s)), c(BZTr.hpdi[1,],rev(BZTr.hpdi[2,])), border=NA,col=rgb(0,0,0,alph=0.25))#
	lines(BZTr.prd~rich.s)#
	points(richBmn~richlev,pch=16,cex=1.5)#
	arrows(richlev, y0=richBmn-richBse, y1=richBmn+richBse, length=0)#
	mtext("%BZT removed",side=2,line=2.5)#
	text(24,81,"p < 0.01")#
	mtext("microbial community richness",side=1,line=2.5)
par(mfrow=c(1,2))#
par(mar=c(5,4,2,0))#
par(oma=c(0,1,1,1))#
plot(richDmn~richlev,pch=NA, ylim=bufferX(c(richDmn-richDse,richDmn+richDse),p=0.05), ylab="",xlab="")#
	polygon(c(rich.s,rev(rich.s)), c(duckgr.hpdi[1,],rev(duckgr.hpdi[2,])), border=NA,col=rgb(0,0,0,alph=0.25))#
	lines(duckgr.prd~rich.s)#
	points(richDmn~richlev,pch=16,cex=1.5)#
	arrows(richlev, y0=richDmn-richDse, y1=richDmn+richDse, length=0)#
	mtext(bquote("plant growth, mm"^2),side=2,line=2.5)#
	mtext("p < 0.05",side=3,line=1)#
	mtext("microbial community richness",side=1,line=2.5, adj=-7)#
plot(richOmn~richlev,pch=NA, ylim=bufferX(c(richOmn-richOse,richOmn+richOse),p=0.05), ylab="", xlab="")#
	points(richOmn~richlev,pch=16,cex=1.5)#
	arrows(richlev, y0=richOmn-richOse, y1=richOmn+richOse, length=0)#
	mtext("microbe growth ln(OD)",side=2,line=2.5)#
	mtext("n.s.",side=3,line=1)
#other measures of richness, possibly of interest#
summary(MCMCglmm(conc_corrected~shannon,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) ##
summary(MCMCglmm(conc_corrected~faithphylodiv,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) ##
#for growth, none are significant#
summary(MCMCglmm(deltasqmm~shannon,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
summary(MCMCglmm(lnOD600~shannon,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
summary(MCMCglmm(deltasqmm~faithphylodiv,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) #
summary(MCMCglmm(lnOD600~faithphylodiv,data=datrich,nitt=100000,burnin=10000,thin=10,verbose=F)) ##
#microbiome richness and urban location#
commrddens <- tapply(biodat$rddns,biodat$genotype,mean)#
rddensSub <- commrddens[names(commrddens)%in%divdf$community]#
urbanrich <- data.frame(rddens = rddensSub, richness = divdf$richness[order(divdf$community)], shannon = divdf$shannon[order(divdf$community)], faithphylodiv = divdf$faithphylodiv[order(divdf$community)])#
richrddens <- MCMCglmm(richness~rddens,data=urbanrich,nitt=100000,burnin=10000,thin=10,verbose=F)#
summary(richrddens)#
summary( MCMCglmm(shannon~rddens,data=urbanrich,nitt=100000,burnin=10000,thin=10,verbose=F))#
summary( MCMCglmm(faithphylodiv~rddens,data=urbanrich,nitt=100000,burnin=10000,thin=10,verbose=F))#
#no relationship
summary(a3ptrt)
summary(pztrt)
summary(pzod)
summary(moxBtrt)
summary(mbod)
summary(glypo)
summary(baaod)
summary(BZTaatrt)
summary(BZTdp)
summary(BZTremtrt)
rawseqstat <- read.csv("BZTinocmicrobiome_sequencing_statistics.csv")#
sum(rawseqstat$Number.of.Reads) # 1,541,469#
sum(rawseqstat$Number.of.Bases) # 770,734,500#
range(rawseqstat$Number.of.Reads) #69,234 117,565#
mean(rawseqstat$Number.of.Reads) #90,674.65#
range(rawseqstat$Number.of.Bases) #34617000 58782500
rm(list=ls())
library(MCMCglmm)#
range01 <- function(x) {#
	newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
	return(newnums)#
} #
#
HPDi <- function(vect,prob) {#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
} #shortcut for coda HPDinterval #
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#
products <- read.csv("experiment A products.csv",header=T, stringsAsFactors=F) #
molmassTPs <- c(136 ,207,249 ,282, 166,150,134,94) # hydroxyBZT, bztalanine, bzt acetyl alanine, glycosylated bzt, pthalic acid#
mgperL <- sapply(1:8, function(z) molmassTPs[z]*products[,z+5]*(1000/2.5))  #molarmass * mols per 2.5 mL * 1000/2.5 = grams /L#
colnames(mgperL) <- colnames(products)[6:13]#
prdngL <- data.frame(cbind(products[,c(1:4,14)],mgperL*1e06))#
prdngL$bztaplusa <- prdngL$BZTalanine + prdngL$BZTacetylalanine#
#
cbind(sapply(6:14, function(z) shapiro.test(prdngL[,z])$statistic) ,#
	sapply(6:14, function(z) shapiro.test(log(prdngL[,z] + min(prdngL[,z][which(prdngL[,z]>0)])))$statistic))#
logimproves <- sapply(6:14, function(z) shapiro.test(prdngL[,z])$statistic) < #
	sapply(6:14, function(z) shapiro.test(log(prdngL[,z] + min(prdngL[,z][which(prdngL[,z]>0)])))$statistic)	#
prdngLmix <- prdngL#
for(i in 1:9){#
	if(logimproves[i]){#
		prdngLmix[,i+5] <- log(prdngL[,i+5] + min(prdngL[,i+5][which(prdngL[,i+5]>0)]) )#
	}#
}#
#
growth<- read.csv("BZTinBZS1_trts_within_geno_plusgrowth.csv",header=T, stringsAsFactors=F)#sorted identically to products#
prdngLmix$logOD <- growth$od.mn#
prdngLmix$ducksize <- growth$px.mn#
#
#MODELS#
##only 24 datapoints, so no interaction terms#
#
#BZT decrease analysis exists in O'Brien et al 2020, repeated here only for completeness for reader#
BrmBSM <- MCMCglmm(BZT.percent.decrease ~ BZT_init + salt + microbes , random = ~ genotype, data=prdngLmix, nitt=50000,verbose=F)#
BrmPXOD <- MCMCglmm(BZT.percent.decrease ~ logOD + ducksize , random = ~ genotype, data=prdngLmix, nitt=50000,verbose=F)#
tapply(prdngLmix$BZT.percent.decrease,prdngLmix$BZT_init,mean); tapply(prdngLmix$BZT.percent.decrease,prdngLmix$BZT_init,std.error)#
tapply(prdngLmix$BZT.percent.decrease,prdngLmix$salt,mean); tapply(prdngLmix$BZT.percent.decrease,prdngLmix$salt,std.error)#
#
#phytotransformation
BZTaaBS <- MCMCglmm(bztaplusa ~ BZT_init + salt  , random = ~ genotype, data=prdngLmix, nitt=100000,verbose=F)#
BZTaaPX <- MCMCglmm(bztaplusa ~ ducksize, random = ~ genotype, data=prdngLmix, nitt=100000,verbose=F)#
glyBS <- MCMCglmm(glycosylatedBZT ~ BZT_init + salt, random = ~ genotype, data=prdngLmix, nitt=100000,verbose=F)#
glyPX <- MCMCglmm(glycosylatedBZT ~ ducksize, random = ~ genotype, data=prdngLmix, nitt=100000,verbose=F)#
tapply(prdngL$bztaplusa, prdngL$BZT_init,mean); tapply(prdngL$bztaplusa, prdngL$BZT_init,std.error)#
tapply(prdngL$glycosylatedBZT, prdngL$BZT_init,mean); tapply(prdngL$glycosylatedBZT, prdngL$BZT_init,std.error)#
tapply(prdngL$bztaplusa, prdngL$salt,mean); tapply(prdngL$bztaplusa, prdngL$salt,std.error)#
tapply(prdngL$glycosylatedBZT, prdngL$salt,mean); tapply(prdngL$glycosylatedBZT, prdngL$salt,std.error)
mxyB <- MCMCglmm(methoxyBZT ~ BZT_init , random = ~ genotype, data=prdngLmix, nitt=50000,verbose=F)#
tapply(prdngL$methoxyBZT, prdngL$BZT_init,mean); tapply(prdngL$methoxyBZT, prdngL$BZT_init,std.error)
summary(BZTaaBS)
summary(glyBS)
rm(list=ls())
library(readxl)#
library(MCMCglmm) # substituting lm() in the place of the one instance of MCMCglmm() provides identical results#
#read data#
bzt = read_excel("bzt3_concs_original_full.xlsx")#
bzt = as.data.frame(bzt)#
bzt$Treatment <- factor(bzt$Treatment, levels = c("Abiotic Control",#
                                                  "Microbes",#
                                                  "Duckweed + Microbes + Salt",#
                                                  "Duckweed + Microbes",#
                                                  "Algae",#
                                                  "Duckweed",#
                                                  "Duckweed + Algae"))#
#
nls_Algae <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
              data = bzt[bzt$Treatment=='Algae',],#
              start = list(A0 = 5, A_inf = 0.6, k=0.1),#
              lower=c(0,0,0), upper=c(10, 5, 1),#
              algorithm="port"#
              )#
#
nls_Duckweed <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                 data = bzt[bzt$Treatment=='Duckweed',],#
                 start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                 lower=c(0,0,0), upper=c(10, 5, 1),#
                 algorithm="port")#
#
nls_Duckweed_Algae <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                    data = bzt[bzt$Treatment=='Duckweed + Algae',],#
                    start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                    lower=c(0,0,0), upper=c(10, 5, 1),#
                    algorithm="port")#
#
nls_Duckweed_Microbes <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                          data = bzt[bzt$Treatment=='Duckweed + Microbes',],#
                          start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                          lower=c(0,0,0), upper=c(10, 5, 1),#
                          algorithm="port")#
#
nls_Duckweed_Microbes_Salt <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                             data = bzt[bzt$Treatment=='Duckweed + Microbes + Salt',],#
                             start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                             lower=c(0,0,0), upper=c(10, 5, 1),#
                             algorithm="port")#
#
nls_Microbes <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                                  data = bzt[bzt$Treatment=='Microbes',],#
                                  start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                                  lower=c(0,0,0), upper=c(10, 5, 1),#
                                  algorithm="port")#
#
nls_Abiotic_Control <- nls(Concentration ~ (A0 - A_inf)*exp(-k*Day)+A_inf,#
                    data = bzt[bzt$Treatment=='Abiotic Control',],#
                    start = list(A0 = 5, A_inf = 0.6, k=0.1),#
                    lower=c(0,0,0), upper=c(10, 5, 1),#
                    algorithm="port")#
#
k_values_nls <- data.frame("Treatment" = c("Abiotic Control","Microbes","Duckweed + Microbes + Salt",#
                                       "Duckweed + Microbes","Algae","Duckweed","Duckweed + Algae"), #
                       "k_value" = c(as.vector(coefficients(nls_Abiotic_Control)[3]),#
                                     as.vector(coefficients(nls_Microbes)[3]),#
                                     as.vector(coefficients(nls_Duckweed_Microbes_Salt)[3]),#
                                     as.vector(coefficients(nls_Duckweed_Microbes)[3]),#
                                     as.vector(coefficients(nls_Algae)[3]),#
                                     as.vector(coefficients(nls_Duckweed)[3]),#
                                     as.vector(coefficients(nls_Duckweed_Algae)[3])),#
                       "lowerCI" = c(as.vector(confint(nls_Abiotic_Control)[3,1]),#
                                     as.vector(confint(nls_Microbes)[3,1]),#
                                     as.vector(confint(nls_Duckweed_Microbes_Salt)[3,1]),#
                                     as.vector(confint(nls_Duckweed_Microbes)[3,1]),#
                                     as.vector(confint(nls_Algae)[3,1]),#
                                     as.vector(confint(nls_Duckweed)[3,1]),#
                                     as.vector(confint(nls_Duckweed_Algae)[3,1])),#
                       "upperCI" = c(as.vector(confint(nls_Abiotic_Control)[3,2]),#
                                     as.vector(confint(nls_Microbes)[3,2]),#
                                     as.vector(confint(nls_Duckweed_Microbes_Salt)[3,2]),#
                                     as.vector(confint(nls_Duckweed_Microbes)[3,2]),#
                                     as.vector(confint(nls_Algae)[3,2]),#
                                     as.vector(confint(nls_Duckweed)[3,2]),#
                                     as.vector(confint(nls_Duckweed_Algae)[3,2])))#
k_values_nls$Treatment <- factor(k_values_nls$Treatment, levels = c("Abiotic Control",#
                                                            "Microbes",#
                                                            "Duckweed + Microbes",#
                                                            "Duckweed + Microbes + Salt",#
                                                            "Algae",#
                                                            "Duckweed",#
                                                            "Duckweed + Algae"))#
DT50_values_nls <- log(2)/k_values_nls[,2:4]#
DT50_values_nls$Treatment <- k_values_nls$Treatment#
#
#setting up variables for predictions and figures#
day.s <- seq(from = 0, to =21, length.out=1000)#
modls <- list(nls_Abiotic_Control, nls_Microbes, nls_Duckweed_Microbes_Salt, #
				nls_Duckweed_Microbes, #
				nls_Algae, nls_Duckweed, nls_Duckweed_Algae)#
profiles <- list(profile(nls_Abiotic_Control), profile(nls_Microbes), profile(nls_Duckweed_Microbes_Salt), #
				profile(nls_Duckweed_Microbes), #
				profile(nls_Algae), profile(nls_Duckweed), profile(nls_Duckweed_Algae))#
colors <- c("black","blue","tan4","turquoise3","darkgoldenrod1","forestgreen","yellowgreen")				#
dfs <- list(bzt[bzt$Treatment=='Abiotic Control',], bzt[bzt$Treatment=='Microbes',], bzt[bzt$Treatment=='Duckweed + Microbes + Salt',], #
			bzt[bzt$Treatment=='Duckweed + Microbes',], #
			bzt[bzt$Treatment=='Algae',], bzt[bzt$Treatment=='Duckweed',], bzt[bzt$Treatment=='Duckweed + Algae',])#
modnames <- c("Abiotic Control","Microbes","Duckweed + Microbes + Salt", "Duckweed + Microbes", "Algae","Duckweed","Duckweed + Algae")#
#
#predictions and confidence intervals#
predtime<- sapply(modls, function(m) predict(m, newdata=data.frame(Day=day.s)))#
CIUtime <-  sapply(profiles, function(m)  sapply(day.s, function(d) #
				(confint(m)[1,2] - confint(m)[2,2])*exp(-1*confint(m)[3,1]*d) + confint(m)[2,2] ))#
CILtime <-  sapply(profiles, function(m)  sapply(day.s, function(d) #
 				( confint(m)[1,1] - ifelse(is.na(confint(m)[2,1]),0,confint(m)[2,1]) )*exp(-1*confint(m)[3,2]*d) + ifelse(is.na(confint(m)[2,1]),0,confint(m)[2,1])  ))#
#
#new result#
summary(MCMCglmm(Concentration~Treatment, data = bzt[bzt$Day==21,],verbose=F,nitt=501000,burnin=1000,thin=10))
layout(matrix(1:6,nrow=2,byrow=T))#
par(mar=c(0,0,0,0))#
par(oma=c(4,4,1,1))#
for(i in 2:ncol(predtime)){#
plot(Concentration~Day,data=dfs[[i]],ylim=c(0,6),pch=NA,xlab="",ylab="",xaxt="n",yaxt="n")#
polygon(c(day.s,rev(day.s)), c(CIUtime[,1], rev(CILtime[,1])), border=NA,col=rgb(0,0,0,alpha=0.25))#
polygon(c(day.s,rev(day.s)), c(CIUtime[,i], rev(CILtime[,i])), border=NA,col=rgb(1,0,0,alpha=0.25))#
	lines(predtime[,1]~day.s)#
	lines(predtime[,i]~day.s,col=rgb(0.75,0,0))#
	abline(h=0,lty=3)#
	points(Concentration~Day,data=dfs[[i]],col=rgb(0.75,0,0))#
#	points(Concentration~Day,data=dfs[[1]],col=rgb(0,0,0))#
	text(10.5,6,modnames[i],adj=c(0.5,0.5))#,side=3,line=0.5)#
#	legend(0,6.4,c("Abiotic Control",modnames[i]),fill=c(rgb(0,0,0),rgb(0.75,0,0)),bty="n") #,side=3,line=0.5)#
	if(i%in%c(2,5)){axis(side=2)}#
	if(i%in%c(5:7)){axis(side=1)}#
	if(i==6){mtext("Day",side=1,line=2)}#
	if(i==5){mtext(expression("Benzotriazole "*mu*"g/L"),side=2,at=6.5,line=2)}	#
}
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
means <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,mean))#
ses <- sapply(dfs, function(m) tapply(m$Concentration,m$Day,std.error))#
#range in percent removed#
range((5-means[6,])/5)#
100*(5-means[6,])/5#
100*ses[6,]/5
layout(matrix(c(1:2),ncol=2),widths=c(6,3))#
par(mar=c(3.5,3.5,1,1))#
par(oma=c(0,0,0,0))#
plot(bzt$Concentration~bzt$Day,pch=NA,xlab="",ylab="",ylim=c(0,6.5))#
	mtext("a.",side=3,line=0,at=-3.5)#
	mtext("Day",side=1,line=2)#
	mtext(expression("Benzotriazole "*mu*"g/L"),side=2,line=2)#
	abline(h=0,lty=3)#
	for(i in 1:7){#
		xjitter <- jitter(c(0,3,7,11,17,21),factor=0.5)#
		points(means[,i]~xjitter, type="b",col=colors[i],pch=1,lwd=1.5)#
		arrows(x0=xjitter,y0=means[,i]-ses[,i],y1=means[,i]+ ses[,i],length=0,col=colors[i])#
	}#
	legend(2,6.75,modnames, fill=colors,bty="n",ncol=2)#
par(mar=c(12,3.5,1,1))#
plot(k_values_nls$k_value ~ c(1:7),xaxt="n",pch=16,col=colors,ylim=c(0,0.27),ylab="",xlab="")#
	mtext("b.",side=3,line=0,at=-1.5)#
	arrows(c(1:7),y0=k_values_nls$upperCI, y1= k_values_nls$lowerCI,length=0,col=colors)#
	mtext(expression(First-order~Kinetic~Constant~(day^{-1})),side=2,line=2,at=-0.01)#
	axis(at=c(1:7),labels=(modnames),las=2,side=1)
quit()
